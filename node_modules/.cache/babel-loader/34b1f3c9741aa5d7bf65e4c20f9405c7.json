{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\nexport function filterNumbers(data, customers, phoneCol) {\n  console.log(customers.phoneCol);\n  console.log(customers[phoneCol]);\n  let numbers = [];\n  let filters = Object.entries(data).filter(([key, value]) => value);\n  customers = Object.entries(customers);\n  let q_index = 0;\n  filters.forEach(f => {\n    const [question, value] = f[0].split('|||'); // Adds numbers by whether answer is or includes checked response (may need to edit)\n\n    if (question !== \"message\" && question !== phoneCol) {\n      let options = customers[q_index][1].options;\n\n      for (const i = 0; i < options.length; i++) {\n        if (options[i] === value) {\n          numbers.push(customers.phoneCol.options[i]);\n        } else if (customers.question.options[i].indexOf(value) >= 0) {\n          numbers.push(customers.phoneCol.options[i]);\n        }\n      }\n    }\n  });\n  numbers = [...new Set(numbers)];\n  console.log(numbers);\n  return numbers;\n}\n\nfunction formatResponses(questions, responses) {\n  let obj = {};\n\n  for (let i = 0; i < questions.length; i++) {\n    let q = questions[i];\n    let all = [];\n    let a = responses.map(r => {\n      if (r[i] && r[i].trim()) {\n        all.push(...r[i].split(','));\n      }\n\n      return r[i];\n    });\n    all = [...new Set(all)];\n    console.log(all);\n\n    if (all.length > 0) {\n      obj[q] = {\n        responses: a,\n        options: all\n      };\n    }\n  }\n\n  return obj;\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    let sheet = doc.sheetsById[pageID];\n    let rows = await sheet.getRows();\n    let responses = rows.map(r => r._rawData);\n    await sheet.loadHeaderRow();\n    let questions = sheet.headerValues;\n    return formatResponses(questions, responses);\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","filterNumbers","data","customers","phoneCol","console","log","numbers","filters","Object","entries","filter","key","value","q_index","forEach","f","question","split","options","i","length","push","indexOf","Set","formatResponses","questions","responses","obj","q","all","a","map","r","trim","getResponses","sheetLink","sheetID","slice","lastIndexOf","pageID","doc","useApiKey","process","env","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","rows","getRows","_rawData","loadHeaderRow","headerValues","e","error"],"mappings":"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","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nexport function filterNumbers(data, customers, phoneCol) {\n    console.log(customers.phoneCol);\n    console.log(customers[phoneCol]);\n    let numbers = [];\n    let filters = Object.entries(data).filter(([key, value]) => value);\n    customers = Object.entries(customers);\n    let q_index = 0;\n    filters.forEach((f) => {\n      const [question, value] = f[0].split('|||');\n      // Adds numbers by whether answer is or includes checked response (may need to edit)\n      \n      if (question !== \"message\" && question !== phoneCol) {\n        let options = customers[q_index][1].options;\n        for(const i=0; i < options.length; i++) {\n            if (options[i] === value) {\n                numbers.push(customers.phoneCol.options[i]);\n            } else if (customers.question.options[i].indexOf(value) >= 0) {\n                numbers.push(customers.phoneCol.options[i]);\n            }\n        }\n      }\n    });\n    numbers = [...new Set(numbers)];\n    console.log(numbers);\n    return numbers;\n}\n\nfunction formatResponses(questions, responses) {\n    let obj = {};\n    for (let i = 0; i < questions.length; i++) {\n        let q = questions[i];\n        let all = [];\n        let a = responses.map((r) => {\n            if (r[i] && r[i].trim()) {\n                all.push(...r[i].split(','));\n            }\n            return r[i];\n        });\n        all = [...new Set(all)];\n        console.log(all);\n        if (all.length > 0) {\n            obj[q] = {\n                responses: a,\n                options: all\n            };\n        }\n    }\n    return obj;\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        let sheet = doc.sheetsById[pageID];\n        let rows = await sheet.getRows();\n        let responses = rows.map(r => r._rawData);\n        await sheet.loadHeaderRow();\n        let questions = sheet.headerValues;\n        return formatResponses(questions, responses);\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}