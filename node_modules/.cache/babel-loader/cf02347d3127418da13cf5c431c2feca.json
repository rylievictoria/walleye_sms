{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nfunction formatResponses(phoneCol, questions, responses) {\n  let obj = {};\n\n  for (let i = 0; i < questions.length; i++) {\n    let q = question[i];\n    let a = responses.map(r => {\n      return r[i];\n    });\n    obj[question] = a;\n  }\n\n  return obj;\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink, phoneCol) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n  const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n  const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    let sheet = doc.sheetsById[pageID];\n    let rows = await sheet.getRows();\n    let customers = rows.map(r => r._rawData);\n    await sheet.loadHeaderRow();\n    let questions = sheet.headerValues;\n    return {\n      questions: questions,\n      customers: customers\n    };\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","formatResponses","phoneCol","questions","responses","obj","i","length","q","question","a","map","r","getResponses","sheetLink","sheetID","slice","lastIndexOf","pageID","doc","client_email","process","env","REACT_APP_SHEETS_CLIENT_EMAIL","private_key","REACT_APP_SHEETS_PRIVATE_KEY","useApiKey","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","rows","getRows","customers","_rawData","loadHeaderRow","headerValues","e","console","error"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,oBAAlC;;AAEA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AACrD,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,CAAC,GAAGC,QAAQ,CAACH,CAAD,CAAhB;AACA,QAAII,CAAC,GAAGN,SAAS,CAACO,GAAV,CAAeC,CAAD,IAAO;AAAC,aAAOA,CAAC,CAACN,CAAD,CAAR;AAAa,KAAnC,CAAR;AACAD,IAAAA,GAAG,CAACI,QAAD,CAAH,GAAgBC,CAAhB;AACH;;AACD,SAAOL,GAAP;AACH,C,CAED;;;AACA,OAAO,eAAeQ,YAAf,CAA4BC,SAA5B,EAAuCZ,QAAvC,EAAiD;AACpD,QAAMa,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAgBF,SAAS,CAACG,WAAV,CAAsB,KAAtB,IAA+B,CAA/C,EAAkDH,SAAS,CAACG,WAAV,CAAsB,QAAtB,CAAlD,CAAhB;AACA,QAAMC,MAAM,GAAGJ,SAAS,CAACE,KAAV,CAAgBF,SAAS,CAACG,WAAV,CAAsB,MAAtB,IAAgC,CAAhD,EAAmDH,SAAS,CAACP,MAA7D,CAAf;AAEA,QAAMY,GAAG,GAAG,IAAInB,iBAAJ,CAAsBe,OAAtB,EAA+BG,MAA/B,CAAZ;AACA,QAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAEA,MAAI;AACA,UAAMN,GAAG,CAACO,SAAJ,CAAcL,OAAO,CAACC,GAAR,CAAYK,wBAA1B,CAAN;AACA,UAAMR,GAAG,CAACS,QAAJ,EAAN;AACA,QAAIC,KAAK,GAAGV,GAAG,CAACW,UAAJ,CAAeZ,MAAf,CAAZ;AACA,QAAIa,IAAI,GAAG,MAAMF,KAAK,CAACG,OAAN,EAAjB;AACA,QAAIC,SAAS,GAAGF,IAAI,CAACpB,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACsB,QAAhB,CAAhB;AACA,UAAML,KAAK,CAACM,aAAN,EAAN;AACA,QAAIhC,SAAS,GAAG0B,KAAK,CAACO,YAAtB;AACA,WAAO;AACHjC,MAAAA,SAAS,EAAEA,SADR;AAEH8B,MAAAA,SAAS,EAAEA;AAFR,KAAP;AAIH,GAZD,CAYE,OAAOI,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACH;AACF","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nfunction formatResponses(phoneCol, questions, responses) {\n    let obj = {};\n    for (let i = 0; i < questions.length; i++) {\n        let q = question[i];\n        let a = responses.map((r) => {return r[i];});\n        obj[question] = a;\n    }\n    return obj;\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink, phoneCol) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n    const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n    const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        let sheet = doc.sheetsById[pageID];\n        let rows = await sheet.getRows();\n        let customers = rows.map(r => r._rawData);\n        await sheet.loadHeaderRow();\n        let questions = sheet.headerValues;\n        return {\n            questions: questions,\n            customers: customers\n        }\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}