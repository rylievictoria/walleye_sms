{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nfunction formatResponses(questions, responses) {\n  let obj = {};\n\n  for (let i = 0; i < questions.length; i++) {\n    let q = questions[i];\n    let a = responses.map(r => {\n      return r[i];\n    });\n    obj[q] = a;\n  }\n\n  console.log(obj);\n  return obj;\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n  const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n  const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    let sheet = doc.sheetsById[pageID];\n    let rows = await sheet.getRows();\n    let responses = rows.map(r => r._rawData);\n    await sheet.loadHeaderRow();\n    let questions = sheet.headerValues;\n    return formatResponses(questions, responses);\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","formatResponses","questions","responses","obj","i","length","q","a","map","r","console","log","getResponses","sheetLink","sheetID","slice","lastIndexOf","pageID","doc","client_email","process","env","REACT_APP_SHEETS_CLIENT_EMAIL","private_key","REACT_APP_SHEETS_PRIVATE_KEY","useApiKey","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","rows","getRows","_rawData","loadHeaderRow","headerValues","e","error"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,oBAAlC;;AAEA,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,SAApC,EAA+C;AAC3C,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,CAAC,GAAGL,SAAS,CAACG,CAAD,CAAjB;AACA,QAAIG,CAAC,GAAGL,SAAS,CAACM,GAAV,CAAeC,CAAD,IAAO;AAAC,aAAOA,CAAC,CAACL,CAAD,CAAR;AAAa,KAAnC,CAAR;AACAD,IAAAA,GAAG,CAACG,CAAD,CAAH,GAASC,CAAT;AACH;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACA,SAAOA,GAAP;AACH,C,CAED;;;AACA,OAAO,eAAeS,YAAf,CAA4BC,SAA5B,EAAuC;AAC1C,QAAMC,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAgBF,SAAS,CAACG,WAAV,CAAsB,KAAtB,IAA+B,CAA/C,EAAkDH,SAAS,CAACG,WAAV,CAAsB,QAAtB,CAAlD,CAAhB;AACA,QAAMC,MAAM,GAAGJ,SAAS,CAACE,KAAV,CAAgBF,SAAS,CAACG,WAAV,CAAsB,MAAtB,IAAgC,CAAhD,EAAmDH,SAAS,CAACR,MAA7D,CAAf;AAEA,QAAMa,GAAG,GAAG,IAAInB,iBAAJ,CAAsBe,OAAtB,EAA+BG,MAA/B,CAAZ;AACA,QAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAEA,MAAI;AACA,UAAMN,GAAG,CAACO,SAAJ,CAAcL,OAAO,CAACC,GAAR,CAAYK,wBAA1B,CAAN;AACA,UAAMR,GAAG,CAACS,QAAJ,EAAN;AACA,QAAIC,KAAK,GAAGV,GAAG,CAACW,UAAJ,CAAeZ,MAAf,CAAZ;AACA,QAAIa,IAAI,GAAG,MAAMF,KAAK,CAACG,OAAN,EAAjB;AACA,QAAI7B,SAAS,GAAG4B,IAAI,CAACtB,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACuB,QAAhB,CAAhB;AACA,UAAMJ,KAAK,CAACK,aAAN,EAAN;AACA,QAAIhC,SAAS,GAAG2B,KAAK,CAACM,YAAtB;AACA,WAAOlC,eAAe,CAACC,SAAD,EAAYC,SAAZ,CAAtB;AACH,GATD,CASE,OAAOiC,CAAP,EAAU;AACRzB,IAAAA,OAAO,CAAC0B,KAAR,CAAc,SAAd,EAAyBD,CAAzB;AACH;AACF","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nfunction formatResponses(questions, responses) {\n    let obj = {};\n    for (let i = 0; i < questions.length; i++) {\n        let q = questions[i];\n        let a = responses.map((r) => {return r[i];});\n        obj[q] = a;\n    }\n    console.log(obj);\n    return obj;\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n    const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n    const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        let sheet = doc.sheetsById[pageID];\n        let rows = await sheet.getRows();\n        let responses = rows.map(r => r._rawData);\n        await sheet.loadHeaderRow();\n        let questions = sheet.headerValues;\n        return formatResponses(questions, responses);\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}