{"ast":null,"code":"var _objectSpread = require(\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _defineProperty = require(\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar _require = require('google-auth-library'),\n    JWT = _require.JWT;\n\nvar Axios = require('axios');\n\nvar GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\n\nvar _require2 = require('./utils'),\n    getFieldMask = _require2.getFieldMask;\n\nvar GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets' // the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nvar AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN'\n};\n\nvar GoogleSpreadsheet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheet(sheetId) {\n    _classCallCheck(this, GoogleSpreadsheet);\n\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null; // create an axios instance with sheet root URL and interceptors to handle auth\n\n    this.axios = Axios.create({\n      baseURL: \"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetId),\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer: function paramsSerializer(params) {\n        var options = '';\n\n        _.keys(params).forEach(function (key) {\n          var isParamTypeObject = typeof params[key] === 'object';\n          var isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += \"\".concat(key, \"=\").concat(encodeURIComponent(params[key]), \"&\");\n\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], function (val) {\n              options += \"\".concat(key, \"=\").concat(encodeURIComponent(val), \"&\");\n            });\n          }\n        });\n\n        return options ? options.slice(0, -1) : options;\n      }\n    }); // have to use bind here or the functions dont have access to `this` :(\n\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  } // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GoogleSpreadsheet, [{\n    key: \"useApiKey\",\n    value: function () {\n      var _useApiKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.authMode = AUTH_MODES.API_KEY;\n                this.apiKey = key;\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function useApiKey(_x) {\n        return _useApiKey.apply(this, arguments);\n      }\n\n      return useApiKey;\n    }() // token must be created and managed (refreshed) elsewhere\n\n  }, {\n    key: \"useRawAccessToken\",\n    value: function () {\n      var _useRawAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n                this.accessToken = token;\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function useRawAccessToken(_x2) {\n        return _useRawAccessToken.apply(this, arguments);\n      }\n\n      return useRawAccessToken;\n    }() // creds should be an object obtained by loading the json file google gives you\n    // impersonateAs is an email of any user in the G Suite domain\n    // (only works if service account has domain-wide delegation enabled)\n\n  }, {\n    key: \"useServiceAccountAuth\",\n    value: function () {\n      var _useServiceAccountAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(creds) {\n        var impersonateAs,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                impersonateAs = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : null;\n                this.jwtClient = new JWT({\n                  email: creds.client_email,\n                  key: creds.private_key,\n                  scopes: GOOGLE_AUTH_SCOPES,\n                  subject: impersonateAs\n                });\n                _context3.next = 4;\n                return this.renewJwtAuth();\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function useServiceAccountAuth(_x3) {\n        return _useServiceAccountAuth.apply(this, arguments);\n      }\n\n      return useServiceAccountAuth;\n    }()\n  }, {\n    key: \"renewJwtAuth\",\n    value: function () {\n      var _renewJwtAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.authMode = AUTH_MODES.JWT;\n                _context4.next = 3;\n                return this.jwtClient.authorize();\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function renewJwtAuth() {\n        return _renewJwtAuth.apply(this, arguments);\n      }\n\n      return renewJwtAuth;\n    }() // TODO: provide mechanism to share single JWT auth between docs?\n    // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_setAxiosRequestAuth\",\n    value: function () {\n      var _setAxiosRequestAuth2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(config) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.authMode === AUTH_MODES.JWT)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                if (this.jwtClient) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('JWT auth is not set up properly');\n\n              case 3:\n                _context5.next = 5;\n                return this.jwtClient.authorize();\n\n              case 5:\n                config.headers.Authorization = \"Bearer \".concat(this.jwtClient.credentials.access_token);\n                _context5.next = 22;\n                break;\n\n              case 8:\n                if (!(this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                if (this.accessToken) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                throw new Error('Invalid access token');\n\n              case 11:\n                config.headers.Authorization = \"Bearer \".concat(this.accessToken);\n                _context5.next = 22;\n                break;\n\n              case 14:\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context5.next = 21;\n                  break;\n                }\n\n                if (this.apiKey) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                throw new Error('Please set API key');\n\n              case 17:\n                config.params = config.params || {};\n                config.params.key = this.apiKey;\n                _context5.next = 22;\n                break;\n\n              case 21:\n                throw new Error('You must initialize some kind of auth before making any requests');\n\n              case 22:\n                return _context5.abrupt(\"return\", config);\n\n              case 23:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _setAxiosRequestAuth(_x4) {\n        return _setAxiosRequestAuth2.apply(this, arguments);\n      }\n\n      return _setAxiosRequestAuth;\n    }()\n  }, {\n    key: \"_handleAxiosResponse\",\n    value: function () {\n      var _handleAxiosResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(response) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", response);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function _handleAxiosResponse(_x5) {\n        return _handleAxiosResponse2.apply(this, arguments);\n      }\n\n      return _handleAxiosResponse;\n    }()\n  }, {\n    key: \"_handleAxiosErrors\",\n    value: function () {\n      var _handleAxiosErrors2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(error) {\n        var _error$response$data$, code, message;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(error.response && error.response.data)) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                if (error.response.data.error) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw error;\n\n              case 3:\n                _error$response$data$ = error.response.data.error, code = _error$response$data$.code, message = _error$response$data$.message;\n                error.message = \"Google API error - [\".concat(code, \"] \").concat(message);\n                throw error;\n\n              case 6:\n                if (!(_.get(error, 'response.status') === 403)) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n\n              case 9:\n                throw error;\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _handleAxiosErrors(_x6) {\n        return _handleAxiosErrors2.apply(this, arguments);\n      }\n\n      return _handleAxiosErrors;\n    }()\n  }, {\n    key: \"_makeSingleUpdateRequest\",\n    value: function () {\n      var _makeSingleUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(requestType, requestParams) {\n        var _this = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.axios.post(':batchUpdate', {\n                  requests: [_defineProperty({}, requestType, requestParams)],\n                  includeSpreadsheetInResponse: true // responseRanges: [string]\n                  // responseIncludeGridData: true\n\n                });\n\n              case 2:\n                response = _context8.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this._updateOrCreateSheet(s);\n                }); // console.log('API RESPONSE', response.data.replies[0][requestType]);\n\n\n                return _context8.abrupt(\"return\", response.data.replies[0][requestType]);\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _makeSingleUpdateRequest(_x7, _x8) {\n        return _makeSingleUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeSingleUpdateRequest;\n    }()\n  }, {\n    key: \"_makeBatchUpdateRequest\",\n    value: function () {\n      var _makeBatchUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(requests, responseRanges) {\n        var _this2 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.axios.post(':batchUpdate', _objectSpread({\n                  requests: requests,\n                  includeSpreadsheetInResponse: true\n                }, responseRanges && _objectSpread({\n                  responseIncludeGridData: true\n                }, responseRanges !== '*' && {\n                  responseRanges: responseRanges\n                })));\n\n              case 2:\n                response = _context9.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this2._updateOrCreateSheet(s);\n                });\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _makeBatchUpdateRequest(_x9, _x10) {\n        return _makeBatchUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeBatchUpdateRequest;\n    }()\n  }, {\n    key: \"_ensureInfoLoaded\",\n    value: function _ensureInfoLoaded() {\n      if (!this._rawProperties) throw new Error('You must call `sheet.loadInfo()` before accessing this property');\n    }\n  }, {\n    key: \"_updateRawProperties\",\n    value: function _updateRawProperties(newProperties) {\n      this._rawProperties = newProperties;\n    }\n  }, {\n    key: \"_updateOrCreateSheet\",\n    value: function _updateOrCreateSheet(_ref2) {\n      var properties = _ref2.properties,\n          data = _ref2.data;\n      var sheetId = properties.sheetId;\n\n      if (!this._rawSheets[sheetId]) {\n        this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n          properties: properties,\n          data: data\n        });\n      } else {\n        this._rawSheets[sheetId]._rawProperties = properties;\n\n        this._rawSheets[sheetId]._fillCellData(data);\n      }\n    } // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(param) {\n      this._ensureInfoLoaded();\n\n      return this._rawProperties[param];\n    }\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(param, newVal) {\n      // eslint-disable-line no-unused-vars\n      throw new Error('Do not update directly - use `updateProperties()`');\n    }\n  }, {\n    key: \"updateProperties\",\n    value: function () {\n      var _updateProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(properties) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n                  properties: properties,\n                  fields: getFieldMask(properties)\n                });\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function updateProperties(_x11) {\n        return _updateProperties.apply(this, arguments);\n      }\n\n      return updateProperties;\n    }() // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadInfo\",\n    value: function () {\n      var _loadInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(includeCells) {\n        var _this3 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.axios.get('/', {\n                  params: _objectSpread({}, includeCells && {\n                    includeGridData: true\n                  })\n                });\n\n              case 2:\n                response = _context11.sent;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this3._updateOrCreateSheet(s);\n                });\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function loadInfo(_x12) {\n        return _loadInfo.apply(this, arguments);\n      }\n\n      return loadInfo;\n    }()\n  }, {\n    key: \"getInfo\",\n    value: function () {\n      var _getInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.loadInfo());\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getInfo() {\n        return _getInfo.apply(this, arguments);\n      }\n\n      return getInfo;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"resetLocalCache\",\n    value: function resetLocalCache() {\n      this._rawProperties = null;\n      this._rawSheets = {};\n    } // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"addSheet\",\n    value: function () {\n      var _addSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var properties,\n            response,\n            newSheetId,\n            newSheet,\n            _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                properties = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                _context13.next = 3;\n                return this._makeSingleUpdateRequest('addSheet', {\n                  properties: _.omit(properties, 'headers', 'headerValues')\n                });\n\n              case 3:\n                response = _context13.sent;\n                // _makeSingleUpdateRequest already adds the sheet\n                newSheetId = response.properties.sheetId;\n                newSheet = this.sheetsById[newSheetId]; // allow it to work with `.headers` but `.headerValues` is the real prop\n\n                if (!(properties.headerValues || properties.headers)) {\n                  _context13.next = 9;\n                  break;\n                }\n\n                _context13.next = 9;\n                return newSheet.setHeaderRow(properties.headerValues || properties.headers);\n\n              case 9:\n                return _context13.abrupt(\"return\", newSheet);\n\n              case 10:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function addSheet() {\n        return _addSheet.apply(this, arguments);\n      }\n\n      return addSheet;\n    }()\n  }, {\n    key: \"addWorksheet\",\n    value: function () {\n      var _addWorksheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(properties) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.addSheet(properties));\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function addWorksheet(_x13) {\n        return _addWorksheet.apply(this, arguments);\n      }\n\n      return addWorksheet;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"deleteSheet\",\n    value: function () {\n      var _deleteSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(sheetId) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this._makeSingleUpdateRequest('deleteSheet', {\n                  sheetId: sheetId\n                });\n\n              case 2:\n                delete this._rawSheets[sheetId];\n\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function deleteSheet(_x14) {\n        return _deleteSheet.apply(this, arguments);\n      }\n\n      return deleteSheet;\n    }() // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"addNamedRange\",\n    value: function () {\n      var _addNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(name, range, namedRangeId) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this._makeSingleUpdateRequest('addNamedRange', {\n                  name: name,\n                  range: range,\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function addNamedRange(_x15, _x16, _x17) {\n        return _addNamedRange.apply(this, arguments);\n      }\n\n      return addNamedRange;\n    }()\n  }, {\n    key: \"deleteNamedRange\",\n    value: function () {\n      var _deleteNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(namedRangeId) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.abrupt(\"return\", this._makeSingleUpdateRequest('deleteNamedRange', {\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function deleteNamedRange(_x18) {\n        return _deleteNamedRange.apply(this, arguments);\n      }\n\n      return deleteNamedRange;\n    }() // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadCells\",\n    value: function () {\n      var _loadCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(filters) {\n        var _this4 = this;\n\n        var readOnlyMode, filtersArray, dataFilters, result, sheets;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                // you can pass in a single filter or an array of filters\n                // strings are treated as a1 ranges\n                // objects are treated as GridRange objects\n                // TODO: make it support DeveloperMetadataLookup objects\n                // TODO: switch to this mode if using a read-only auth token?\n                readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n                filtersArray = _.isArray(filters) ? filters : [filters];\n                dataFilters = _.map(filtersArray, function (filter) {\n                  if (_.isString(filter)) {\n                    return readOnlyMode ? filter : {\n                      a1Range: filter\n                    };\n                  }\n\n                  if (_.isObject(filter)) {\n                    if (readOnlyMode) {\n                      throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n                    } // TODO: make this support Developer Metadata filters\n\n\n                    return {\n                      gridRange: filter\n                    };\n                  }\n\n                  throw new Error('Each filter must be an A1 range string or a gridrange object');\n                });\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context18.next = 9;\n                  break;\n                }\n\n                _context18.next = 6;\n                return this.axios.get('/', {\n                  params: {\n                    includeGridData: true,\n                    ranges: dataFilters\n                  }\n                });\n\n              case 6:\n                result = _context18.sent;\n                _context18.next = 12;\n                break;\n\n              case 9:\n                _context18.next = 11;\n                return this.axios.post(':getByDataFilter', {\n                  includeGridData: true,\n                  dataFilters: dataFilters\n                });\n\n              case 11:\n                result = _context18.sent;\n\n              case 12:\n                sheets = result.data.sheets;\n\n                _.each(sheets, function (sheet) {\n                  _this4._updateOrCreateSheet(sheet);\n                });\n\n              case 14:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function loadCells(_x19) {\n        return _loadCells.apply(this, arguments);\n      }\n\n      return loadCells;\n    }()\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._getProp('title');\n    },\n    set: function set(newVal) {\n      this._setProp('title', newVal);\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this._getProp('locale');\n    },\n    set: function set(newVal) {\n      this._setProp('locale', newVal);\n    }\n  }, {\n    key: \"timeZone\",\n    get: function get() {\n      return this._getProp('timeZone');\n    },\n    set: function set(newVal) {\n      this._setProp('timeZone', newVal);\n    }\n  }, {\n    key: \"autoRecalc\",\n    get: function get() {\n      return this._getProp('autoRecalc');\n    },\n    set: function set(newVal) {\n      this._setProp('autoRecalc', newVal);\n    }\n  }, {\n    key: \"defaultFormat\",\n    get: function get() {\n      return this._getProp('defaultFormat');\n    },\n    set: function set(newVal) {\n      this._setProp('defaultFormat', newVal);\n    }\n  }, {\n    key: \"spreadsheetTheme\",\n    get: function get() {\n      return this._getProp('spreadsheetTheme');\n    },\n    set: function set(newVal) {\n      this._setProp('spreadsheetTheme', newVal);\n    }\n  }, {\n    key: \"iterativeCalculationSettings\",\n    get: function get() {\n      return this._getProp('iterativeCalculationSettings');\n    },\n    set: function set(newVal) {\n      this._setProp('iterativeCalculationSettings', newVal);\n    }\n  }, {\n    key: \"sheetCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.values(this._rawSheets).length;\n    }\n  }, {\n    key: \"sheetsById\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this._rawSheets;\n    }\n  }, {\n    key: \"sheetsByIndex\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.sortBy(this._rawSheets, 'index');\n    }\n  }, {\n    key: \"sheetsByTitle\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.keyBy(this._rawSheets, 'title');\n    }\n  }]);\n\n  return GoogleSpreadsheet;\n}();\n\nmodule.exports = GoogleSpreadsheet;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js"],"names":["_","require","JWT","Axios","GoogleSpreadsheetWorksheet","getFieldMask","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","GoogleSpreadsheet","sheetId","spreadsheetId","authMode","_rawSheets","_rawProperties","axios","create","baseURL","paramsSerializer","params","options","keys","forEach","key","isParamTypeObject","isParamTypeArray","length","encodeURIComponent","each","val","slice","interceptors","request","use","_setAxiosRequestAuth","bind","response","_handleAxiosResponse","_handleAxiosErrors","apiKey","token","accessToken","creds","impersonateAs","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","Error","headers","Authorization","credentials","access_token","error","data","code","message","get","requestType","requestParams","post","requests","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","properties","sheets","s","_updateOrCreateSheet","replies","responseRanges","responseIncludeGridData","newProperties","_fillCellData","param","_ensureInfoLoaded","newVal","_makeSingleUpdateRequest","fields","includeCells","includeGridData","loadInfo","omit","newSheetId","newSheet","sheetsById","headerValues","setHeaderRow","addSheet","name","range","namedRangeId","filters","readOnlyMode","filtersArray","isArray","dataFilters","map","filter","isString","a1Range","isObject","gridRange","ranges","result","sheet","_getProp","_setProp","values","sortBy","keyBy","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `sheet.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    if (properties.headerValues || properties.headers) {\n      await newSheet.setHeaderRow(properties.headerValues || properties.headers);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n"]},"metadata":{},"sourceType":"script"}