{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nasync function getSheet(sheetID, pageID) {\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n  const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n  const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    const sheet = doc.sheetsById[pageID];\n    return sheet;\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n  const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n  const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    const sheet = doc.sheetsById[pageID];\n    console.log(sheet);\n    console.log(sheet.values);\n    const questions = await sheet.loadHeaderRow();\n    const cells = await sheet.loadCells();\n    const rows = await sheet.getRows();\n    console.log(rows[0].keys());\n    const customers = rows.map(r => {\n      return r._rawData;\n    });\n    questions = questions.map(q => {\n      return q;\n    });\n    cells = cells.map(q => {\n      return q;\n    });\n    console.log(cells);\n    console.log(questions);\n    console.log(customers);\n    return customers;\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","getSheet","sheetID","pageID","doc","client_email","process","env","REACT_APP_SHEETS_CLIENT_EMAIL","private_key","REACT_APP_SHEETS_PRIVATE_KEY","useApiKey","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","e","console","error","getResponses","sheetLink","slice","lastIndexOf","length","log","values","questions","loadHeaderRow","cells","loadCells","rows","getRows","keys","customers","map","r","_rawData","q"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,oBAAlC;;AAEA,eAAeC,QAAf,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AACrC,QAAMC,GAAG,GAAG,IAAIJ,iBAAJ,CAAsBE,OAAtB,EAA+BC,MAA/B,CAAZ;AACA,QAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAEA,MAAI;AACA,UAAMN,GAAG,CAACO,SAAJ,CAAcL,OAAO,CAACC,GAAR,CAAYK,wBAA1B,CAAN;AACA,UAAMR,GAAG,CAACS,QAAJ,EAAN;AACA,UAAMC,KAAK,GAAGV,GAAG,CAACW,UAAJ,CAAeZ,MAAf,CAAd;AACA,WAAOW,KAAP;AACH,GALD,CAKE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACH;AACJ,C,CAED;;;AACA,OAAO,eAAeG,YAAf,CAA4BC,SAA5B,EAAuC;AAC1C,QAAMlB,OAAO,GAAGkB,SAAS,CAACC,KAAV,CAAgBD,SAAS,CAACE,WAAV,CAAsB,KAAtB,IAA+B,CAA/C,EAAkDF,SAAS,CAACE,WAAV,CAAsB,QAAtB,CAAlD,CAAhB;AACA,QAAMnB,MAAM,GAAGiB,SAAS,CAACC,KAAV,CAAgBD,SAAS,CAACE,WAAV,CAAsB,MAAtB,IAAgC,CAAhD,EAAmDF,SAAS,CAACG,MAA7D,CAAf;AAEA,QAAMnB,GAAG,GAAG,IAAIJ,iBAAJ,CAAsBE,OAAtB,EAA+BC,MAA/B,CAAZ;AACA,QAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAEA,MAAI;AACA,UAAMN,GAAG,CAACO,SAAJ,CAAcL,OAAO,CAACC,GAAR,CAAYK,wBAA1B,CAAN;AACA,UAAMR,GAAG,CAACS,QAAJ,EAAN;AACA,UAAMC,KAAK,GAAGV,GAAG,CAACW,UAAJ,CAAeZ,MAAf,CAAd;AACAc,IAAAA,OAAO,CAACO,GAAR,CAAYV,KAAZ;AACAG,IAAAA,OAAO,CAACO,GAAR,CAAYV,KAAK,CAACW,MAAlB;AACA,UAAMC,SAAS,GAAG,MAAMZ,KAAK,CAACa,aAAN,EAAxB;AACA,UAAMC,KAAK,GAAG,MAAMd,KAAK,CAACe,SAAN,EAApB;AACA,UAAMC,IAAI,GAAG,MAAMhB,KAAK,CAACiB,OAAN,EAAnB;AACAd,IAAAA,OAAO,CAACO,GAAR,CAAYM,IAAI,CAAC,CAAD,CAAJ,CAAQE,IAAR,EAAZ;AACA,UAAMC,SAAS,GAAGH,IAAI,CAACI,GAAL,CAAUC,CAAD,IAAO;AAC9B,aAAOA,CAAC,CAACC,QAAT;AACH,KAFiB,CAAlB;AAGAV,IAAAA,SAAS,GAAGA,SAAS,CAACQ,GAAV,CAAeG,CAAD,IAAO;AAAE,aAAOA,CAAP;AAAW,KAAlC,CAAZ;AACAT,IAAAA,KAAK,GAAGA,KAAK,CAACM,GAAN,CAAWG,CAAD,IAAO;AAAE,aAAOA,CAAP;AAAW,KAA9B,CAAR;AACApB,IAAAA,OAAO,CAACO,GAAR,CAAYI,KAAZ;AACAX,IAAAA,OAAO,CAACO,GAAR,CAAYE,SAAZ;AACAT,IAAAA,OAAO,CAACO,GAAR,CAAYS,SAAZ;AACA,WAAOA,SAAP;AACH,GAnBD,CAmBE,OAAOjB,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACH;AACF","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nasync function getSheet(sheetID, pageID) {\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n    const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n    const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        const sheet = doc.sheetsById[pageID];\n        return sheet;\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n    const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n    const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        const sheet = doc.sheetsById[pageID];\n        console.log(sheet);\n        console.log(sheet.values);\n        const questions = await sheet.loadHeaderRow();\n        const cells = await sheet.loadCells();\n        const rows = await sheet.getRows();\n        console.log(rows[0].keys());\n        const customers = rows.map((r) => {\n            return r._rawData;\n        });\n        questions = questions.map((q) => { return q; });\n        cells = cells.map((q) => { return q; });\n        console.log(cells);\n        console.log(questions);\n        console.log(customers);\n        return customers;\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}