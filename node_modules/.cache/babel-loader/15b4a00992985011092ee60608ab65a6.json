{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\nexport function filterNumbers(data, customers, phoneCol) {\n  let numbers = [];\n\n  for (let q = 0; q < data.length; q++) {\n    console.log(data);\n    const [question, value] = filters[q].split('|||');\n    let options = customers[question];\n    console.log(options);\n  }\n\n  return numbers; // let q_index = 0;\n  // filters.forEach((f) => {\n  //   const [question, value] = f[0].split('|||');\n  //   // Adds numbers by whether answer is or includes checked response (may need to edit)\n  //   if (question !== \"message\" && question !== phoneCol) {\n  //     let options = customers[q_index][1].options;\n  //     for(let i=0; i < options.length; i++) {\n  //         console.log(options[i]);\n  //         console.log(value);\n  //         console.log(customers[phoneCol].options[i]);\n  //         if (options[i] === value) {\n  //             numbers.push(customers[phoneCol].options[i]);\n  //         } else if (options[i].indexOf(value) >= 0) {\n  //             numbers.push(customers[phoneCol].options[i]);\n  //         }\n  //     }\n  //   }\n  //   q_index++;\n  // });\n  // numbers = [...new Set(numbers)];\n  // console.log(numbers);\n  // return numbers;\n}\n\nfunction formatResponses(questions, responses) {\n  let obj = {};\n\n  for (let i = 0; i < questions.length; i++) {\n    let q = questions[i];\n    let all = [];\n    let a = responses.map(r => {\n      if (r[i] && r[i].trim()) {\n        all.push(...r[i].split(','));\n      }\n\n      return r[i];\n    });\n    all = [...new Set(all)];\n\n    if (all.length > 0) {\n      obj[q] = {\n        responses: a,\n        options: all\n      };\n    }\n  }\n\n  return obj;\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    let sheet = doc.sheetsById[pageID];\n    let rows = await sheet.getRows();\n    let responses = rows.map(r => r._rawData);\n    await sheet.loadHeaderRow();\n    let questions = sheet.headerValues;\n    return formatResponses(questions, responses);\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","filterNumbers","data","customers","phoneCol","numbers","q","length","console","log","question","value","filters","split","options","formatResponses","questions","responses","obj","i","all","a","map","r","trim","push","Set","getResponses","sheetLink","sheetID","slice","lastIndexOf","pageID","doc","useApiKey","process","env","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","rows","getRows","_rawData","loadHeaderRow","headerValues","e","error"],"mappings":"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","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nexport function filterNumbers(data, customers, phoneCol) {\n    let numbers = [];\n\n    for(let q=0; q<data.length; q++) {\n        console.log(data);\n        const [question, value] = filters[q].split('|||');\n        let options = customers[question];\n        console.log(options);\n    }\n    return numbers;\n    // let q_index = 0;\n    // filters.forEach((f) => {\n    //   const [question, value] = f[0].split('|||');\n    //   // Adds numbers by whether answer is or includes checked response (may need to edit)\n      \n    //   if (question !== \"message\" && question !== phoneCol) {\n    //     let options = customers[q_index][1].options;\n    //     for(let i=0; i < options.length; i++) {\n    //         console.log(options[i]);\n    //         console.log(value);\n    //         console.log(customers[phoneCol].options[i]);\n    //         if (options[i] === value) {\n    //             numbers.push(customers[phoneCol].options[i]);\n    //         } else if (options[i].indexOf(value) >= 0) {\n    //             numbers.push(customers[phoneCol].options[i]);\n    //         }\n    //     }\n    //   }\n    //   q_index++;\n    // });\n    // numbers = [...new Set(numbers)];\n    // console.log(numbers);\n    // return numbers;\n}\n\nfunction formatResponses(questions, responses) {\n    let obj = {};\n    for (let i = 0; i < questions.length; i++) {\n        let q = questions[i];\n        let all = [];\n        let a = responses.map((r) => {\n            if (r[i] && r[i].trim()) {\n                all.push(...r[i].split(','));\n            }\n            return r[i];\n        });\n        all = [...new Set(all)];\n        if (all.length > 0) {\n            obj[q] = {\n                responses: a,\n                options: all\n            };\n        }\n    }\n    return obj;\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        let sheet = doc.sheetsById[pageID];\n        let rows = await sheet.getRows();\n        let responses = rows.map(r => r._rawData);\n        await sheet.loadHeaderRow();\n        let questions = sheet.headerValues;\n        return formatResponses(questions, responses);\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}