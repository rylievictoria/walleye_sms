{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\nexport function filterNumbers(data, customers, phoneCol) {\n  let numbers = [];\n  Object.keys(data).forEach(d => {\n    const [q, value] = d.split('|||');\n\n    if (data[d] && d !== \"message\") {\n      for (let i = 0; i < customers[q].responses.length; i++) {\n        if (customers[q].responses[i] === value) {\n          numbers.push(customers[phoneCol].options[i]);\n        } else if (customers[q].responses[i].indexOf(value) >= 0) {\n          numbers.push(customers[phoneCol].options[i]);\n        }\n      }\n    }\n  });\n  console.log(numbers); // for(let q=0; q<data.length; q++) {\n  //     console.log(data);\n  //     const [question, value] = filters[q].split('|||');\n  //     let options = customers[question];\n  //     console.log(options);\n  // }\n\n  return numbers; // let q_index = 0;\n  // filters.forEach((f) => {\n  //   const [question, value] = f[0].split('|||');\n  //   // Adds numbers by whether answer is or includes checked response (may need to edit)\n  //   if (question !== \"message\" && question !== phoneCol) {\n  //     let options = customers[q_index][1].options;\n  //     for(let i=0; i < options.length; i++) {\n  //         console.log(options[i]);\n  //         console.log(value);\n  //         console.log(customers[phoneCol].options[i]);\n  //         if (options[i] === value) {\n  //             numbers.push(customers[phoneCol].options[i]);\n  //         } else if (options[i].indexOf(value) >= 0) {\n  //             numbers.push(customers[phoneCol].options[i]);\n  //         }\n  //     }\n  //   }\n  //   q_index++;\n  // });\n  // numbers = [...new Set(numbers)];\n  // console.log(numbers);\n  // return numbers;\n}\n\nfunction formatResponses(questions, responses) {\n  let obj = {};\n\n  for (let i = 0; i < questions.length; i++) {\n    let q = questions[i];\n    let all = [];\n    let a = responses.map(r => {\n      if (r[i] && r[i].trim()) {\n        all.push(...r[i].split(','));\n      }\n\n      return r[i];\n    });\n    all = [...new Set(all)];\n\n    if (all.length > 0) {\n      obj[q] = {\n        responses: a,\n        options: all\n      };\n    }\n  }\n\n  return obj;\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    let sheet = doc.sheetsById[pageID];\n    let rows = await sheet.getRows();\n    let responses = rows.map(r => r._rawData);\n    await sheet.loadHeaderRow();\n    let questions = sheet.headerValues;\n    return formatResponses(questions, responses);\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","filterNumbers","data","customers","phoneCol","numbers","Object","keys","forEach","d","q","value","split","i","responses","length","push","options","indexOf","console","log","formatResponses","questions","obj","all","a","map","r","trim","Set","getResponses","sheetLink","sheetID","slice","lastIndexOf","pageID","doc","useApiKey","process","env","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","rows","getRows","_rawData","loadHeaderRow","headerValues","e","error"],"mappings":"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","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nexport function filterNumbers(data, customers, phoneCol) {\n    let numbers = [];\n    Object.keys(data).forEach((d) => {\n        const [q, value] = d.split('|||');\n        if (data[d] && d !== \"message\") {\n            for(let i=0; i<customers[q].responses.length; i++) {\n                if (customers[q].responses[i] === value) {\n                    numbers.push(customers[phoneCol].options[i]);\n                } else if (customers[q].responses[i].indexOf(value) >= 0) {\n                    numbers.push(customers[phoneCol].options[i]);\n                }\n            }\n        }\n    });\n    console.log(numbers);\n\n    // for(let q=0; q<data.length; q++) {\n    //     console.log(data);\n    //     const [question, value] = filters[q].split('|||');\n    //     let options = customers[question];\n    //     console.log(options);\n    // }\n    return numbers;\n    // let q_index = 0;\n    // filters.forEach((f) => {\n    //   const [question, value] = f[0].split('|||');\n    //   // Adds numbers by whether answer is or includes checked response (may need to edit)\n      \n    //   if (question !== \"message\" && question !== phoneCol) {\n    //     let options = customers[q_index][1].options;\n    //     for(let i=0; i < options.length; i++) {\n    //         console.log(options[i]);\n    //         console.log(value);\n    //         console.log(customers[phoneCol].options[i]);\n    //         if (options[i] === value) {\n    //             numbers.push(customers[phoneCol].options[i]);\n    //         } else if (options[i].indexOf(value) >= 0) {\n    //             numbers.push(customers[phoneCol].options[i]);\n    //         }\n    //     }\n    //   }\n    //   q_index++;\n    // });\n    // numbers = [...new Set(numbers)];\n    // console.log(numbers);\n    // return numbers;\n}\n\nfunction formatResponses(questions, responses) {\n    let obj = {};\n    for (let i = 0; i < questions.length; i++) {\n        let q = questions[i];\n        let all = [];\n        let a = responses.map((r) => {\n            if (r[i] && r[i].trim()) {\n                all.push(...r[i].split(','));\n            }\n            return r[i];\n        });\n        all = [...new Set(all)];\n        if (all.length > 0) {\n            obj[q] = {\n                responses: a,\n                options: all\n            };\n        }\n    }\n    return obj;\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        let sheet = doc.sheetsById[pageID];\n        let rows = await sheet.getRows();\n        let responses = rows.map(r => r._rawData);\n        await sheet.loadHeaderRow();\n        let questions = sheet.headerValues;\n        return formatResponses(questions, responses);\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}