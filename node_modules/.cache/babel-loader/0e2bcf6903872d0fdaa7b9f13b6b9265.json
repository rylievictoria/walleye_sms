{"ast":null,"code":"import _slicedToArray from\"/Users/rhendren/walleye_sms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import PageLoader from\"./../components/PageLoader\";import FormAlert from\"./../components/FormAlert\";import{handleRecoverEmail,handleVerifyEmail}from\"./../util/auth.js\";import{useRouter}from\"./../util/router.js\";function FirebaseActionPage(props){var router=useRouter();var _useState=useState(),_useState2=_slicedToArray(_useState,2),formAlert=_useState2[0],setFormAlert=_useState2[1];useEffect(function(){var _router$query=router.query,mode=_router$query.mode,oobCode=_router$query.oobCode;// Do nothing if mode param is undefined.\n// Page may have been pre-rendered by server so won't have query values\n// until it's actually run on client (as is the case if using Next.js)\nif(!mode)return;// Take action based on Firebase \"mode\" query param\nswitch(mode){case\"resetPassword\":// Redirect to change password page\nrouter.replace(\"/auth/changepass?oobCode=\".concat(oobCode));break;case\"recoverEmail\":// Reset to original email\nhandleRecoverEmail(oobCode).then(function(originalEmail){setFormAlert({type:\"success\",message:\"Your email has been set back to \".concat(originalEmail,\". We've also sent you a password reset email so that you can change your password if you think someone may have access to your account.\")});}).catch(function(error){setFormAlert({type:\"error\",message:error.message});});break;case\"verifyEmail\":// Verify email in Firebase\nhandleVerifyEmail(oobCode).then(function(){setFormAlert({type:\"success\",message:\"Your email has been verified. You may now close this window.\"});}).catch(function(error){setFormAlert({type:\"error\",message:error.message});});break;default:setFormAlert({type:\"error\",message:\"Invalid mode parameter\"});}},[router]);return/*#__PURE__*/React.createElement(PageLoader,null,formAlert&&/*#__PURE__*/React.createElement(FormAlert,{type:formAlert.type,message:formAlert.message,style:{maxWidth:\"500px\"}}));}export default FirebaseActionPage;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/pages/firebase-action.js"],"names":["React","useEffect","useState","PageLoader","FormAlert","handleRecoverEmail","handleVerifyEmail","useRouter","FirebaseActionPage","props","router","formAlert","setFormAlert","query","mode","oobCode","replace","then","originalEmail","type","message","catch","error","maxWidth"],"mappings":"kJAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,UAAP,KAAuB,4BAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,2BAAtB,CACA,OAASC,kBAAT,CAA6BC,iBAA7B,KAAsD,mBAAtD,CACA,OAASC,SAAT,KAA0B,qBAA1B,CAEA,QAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,CACjC,GAAMC,CAAAA,MAAM,CAAGH,SAAS,EAAxB,CADiC,cAECL,QAAQ,EAFT,wCAE1BS,SAF0B,eAEfC,YAFe,eAIjCX,SAAS,CAAC,UAAM,mBACYS,MAAM,CAACG,KADnB,CACNC,IADM,eACNA,IADM,CACAC,OADA,eACAA,OADA,CAGd;AACA;AACA;AACA,GAAI,CAACD,IAAL,CAAW,OAEX;AACA,OAAQA,IAAR,EACE,IAAK,eAAL,CACE;AACAJ,MAAM,CAACM,OAAP,oCAA2CD,OAA3C,GACA,MACF,IAAK,cAAL,CACE;AACAV,kBAAkB,CAACU,OAAD,CAAlB,CACGE,IADH,CACQ,SAACC,aAAD,CAAmB,CACvBN,YAAY,CAAC,CACXO,IAAI,CAAE,SADK,CAEXC,OAAO,2CAAqCF,aAArC,2IAFI,CAAD,CAAZ,CAID,CANH,EAOGG,KAPH,CAOS,SAACC,KAAD,CAAW,CAChBV,YAAY,CAAC,CACXO,IAAI,CAAE,OADK,CAEXC,OAAO,CAAEE,KAAK,CAACF,OAFJ,CAAD,CAAZ,CAID,CAZH,EAaA,MACF,IAAK,aAAL,CACE;AACAd,iBAAiB,CAACS,OAAD,CAAjB,CACGE,IADH,CACQ,UAAM,CACVL,YAAY,CAAC,CACXO,IAAI,CAAE,SADK,CAEXC,OAAO,+DAFI,CAAD,CAAZ,CAID,CANH,EAOGC,KAPH,CAOS,SAACC,KAAD,CAAW,CAChBV,YAAY,CAAC,CACXO,IAAI,CAAE,OADK,CAEXC,OAAO,CAAEE,KAAK,CAACF,OAFJ,CAAD,CAAZ,CAID,CAZH,EAaA,MACF,QACER,YAAY,CAAC,CACXO,IAAI,CAAE,OADK,CAEXC,OAAO,CAAE,wBAFE,CAAD,CAAZ,CAtCJ,CA2CD,CApDQ,CAoDN,CAACV,MAAD,CApDM,CAAT,CAsDA,mBACE,oBAAC,UAAD,MACGC,SAAS,eACR,oBAAC,SAAD,EACE,IAAI,CAAEA,SAAS,CAACQ,IADlB,CAEE,OAAO,CAAER,SAAS,CAACS,OAFrB,CAGE,KAAK,CAAE,CAAEG,QAAQ,CAAE,OAAZ,CAHT,EAFJ,CADF,CAWD,CAED,cAAef,CAAAA,kBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PageLoader from \"./../components/PageLoader\";\nimport FormAlert from \"./../components/FormAlert\";\nimport { handleRecoverEmail, handleVerifyEmail } from \"./../util/auth.js\";\nimport { useRouter } from \"./../util/router.js\";\n\nfunction FirebaseActionPage(props) {\n  const router = useRouter();\n  const [formAlert, setFormAlert] = useState();\n\n  useEffect(() => {\n    const { mode, oobCode } = router.query;\n\n    // Do nothing if mode param is undefined.\n    // Page may have been pre-rendered by server so won't have query values\n    // until it's actually run on client (as is the case if using Next.js)\n    if (!mode) return;\n\n    // Take action based on Firebase \"mode\" query param\n    switch (mode) {\n      case \"resetPassword\":\n        // Redirect to change password page\n        router.replace(`/auth/changepass?oobCode=${oobCode}`);\n        break;\n      case \"recoverEmail\":\n        // Reset to original email\n        handleRecoverEmail(oobCode)\n          .then((originalEmail) => {\n            setFormAlert({\n              type: \"success\",\n              message: `Your email has been set back to ${originalEmail}. We've also sent you a password reset email so that you can change your password if you think someone may have access to your account.`,\n            });\n          })\n          .catch((error) => {\n            setFormAlert({\n              type: \"error\",\n              message: error.message,\n            });\n          });\n        break;\n      case \"verifyEmail\":\n        // Verify email in Firebase\n        handleVerifyEmail(oobCode)\n          .then(() => {\n            setFormAlert({\n              type: \"success\",\n              message: `Your email has been verified. You may now close this window.`,\n            });\n          })\n          .catch((error) => {\n            setFormAlert({\n              type: \"error\",\n              message: error.message,\n            });\n          });\n        break;\n      default:\n        setFormAlert({\n          type: \"error\",\n          message: \"Invalid mode parameter\",\n        });\n    }\n  }, [router]);\n\n  return (\n    <PageLoader>\n      {formAlert && (\n        <FormAlert\n          type={formAlert.type}\n          message={formAlert.message}\n          style={{ maxWidth: \"500px\" }}\n        />\n      )}\n    </PageLoader>\n  );\n}\n\nexport default FirebaseActionPage;\n"]},"metadata":{},"sourceType":"module"}