{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/components/DashboardSms.js\";\nimport React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\nimport { getResponses } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [responses, setResponses] = useState([[\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"], [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]], [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]]]);\n  const [formAlert, setFormAlert] = useState(null);\n  useEffect(async () => {\n    if (auth.user.planIsActive && auth.user.sheetLink) {\n      let resp = await getResponses(auth.user.sheetLink);\n      console.log(resp);\n    } else {\n      // Alert that no subscription and should sign up\n      console.log(responses);\n    }\n  });\n  let questions = responses[0];\n  let numbers = [2624243872, 6309010523];\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    console.log(data); // Show pending indicator\n\n    setPending(true); // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n\n    auth.updatePassword(data.pass).then(() => {\n      // Clear form\n      reset(); // Set success status\n\n      props.onStatus({\n        type: \"success\",\n        message: \"Your password has been updated\"\n      });\n    }) // Maybe also catch error for needing a subscription?\n    .catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        // Update state to show re-authentication modal\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit({\n            pass: data.pass\n          })\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, questions.map(question => /*#__PURE__*/React.createElement(FormField, {\n    key: question,\n    name: question,\n    type: \"checkbox\",\n    label: \"Check me\",\n    error: errors.question,\n    inputRef: register({\n      required: \"Please answer this question.\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(FormField, {\n    name: \"message\",\n    type: \"textarea\",\n    label: \"Please enter your SMS\",\n    placeholder: \"Write to your people\",\n    error: errors.message,\n    inputRef: register({\n      required: \"Please enter your text message to send!\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: pending ? \"loading\" : \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\nexport default DashboardSms;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/components/DashboardSms.js"],"names":["React","useState","useEffect","FormField","SectionButton","useAuth","useForm","getResponses","redirectToCheckout","DashboardSms","props","auth","pending","setPending","responses","setResponses","formAlert","setFormAlert","user","planIsActive","sheetLink","resp","console","log","questions","numbers","register","handleSubmit","errors","reset","onSubmit","data","updatePassword","pass","then","onStatus","type","message","catch","error","code","callback","finally","map","question","required","parentColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\nimport { getResponses } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [responses, setResponses] = useState([\n      [\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"],\n      [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]],\n      [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]],\n  ]);\n  const [formAlert, setFormAlert] = useState(null);\n\n  useEffect(async () => {\n    if (auth.user.planIsActive && auth.user.sheetLink) {\n      let resp = await getResponses(auth.user.sheetLink);\n      console.log(resp);\n    }\n    else {\n      // Alert that no subscription and should sign up\n      console.log(responses);\n    }\n  });\n\n  let questions = responses[0];\n  let numbers = [2624243872, 6309010523];\n\n  const { register, handleSubmit, errors, reset } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n    // Show pending indicator\n    setPending(true);\n\n    // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      // Maybe also catch error for needing a subscription?\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Update state to show re-authentication modal\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit({ pass: data.pass }),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {questions.map((question) => (\n          <FormField\n          key={question}\n          name={question}\n          type=\"checkbox\"\n          label=\"Check me\"\n          error={errors.question}\n          inputRef={register({\n            required:\n              \"Please answer this question.\",\n          })}\n        />\n      )\n      )}\n\n      <FormField\n        name=\"message\"\n        type=\"textarea\"\n        label=\"Please enter your SMS\"\n        placeholder=\"Write to your people\"\n        error={errors.message}\n        inputRef={register({\n          required: \"Please enter your text message to send!\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Send\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardSms;\n"]},"metadata":{},"sourceType":"module"}