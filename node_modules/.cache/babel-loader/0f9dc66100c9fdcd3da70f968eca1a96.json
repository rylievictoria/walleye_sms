{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/pages/firebase-action.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PageLoader from \"./../components/PageLoader\";\nimport FormAlert from \"./../components/FormAlert\";\nimport { handleRecoverEmail, handleVerifyEmail } from \"./../util/auth.js\";\nimport { useRouter } from \"./../util/router.js\";\n\nfunction FirebaseActionPage(props) {\n  const router = useRouter();\n  const [formAlert, setFormAlert] = useState();\n  useEffect(() => {\n    const {\n      mode,\n      oobCode\n    } = router.query; // Do nothing if mode param is undefined.\n    // Page may have been pre-rendered by server so won't have query values\n    // until it's actually run on client (as is the case if using Next.js)\n\n    if (!mode) return; // Take action based on Firebase \"mode\" query param\n\n    switch (mode) {\n      case \"resetPassword\":\n        // Redirect to change password page\n        router.replace(`/auth/changepass?oobCode=${oobCode}`);\n        break;\n\n      case \"recoverEmail\":\n        // Reset to original email\n        handleRecoverEmail(oobCode).then(originalEmail => {\n          setFormAlert({\n            type: \"success\",\n            message: `Your email has been set back to ${originalEmail}. We've also sent you a password reset email so that you can change your password if you think someone may have access to your account.`\n          });\n        }).catch(error => {\n          setFormAlert({\n            type: \"error\",\n            message: error.message\n          });\n        });\n        break;\n\n      case \"verifyEmail\":\n        // Verify email in Firebase\n        handleVerifyEmail(oobCode).then(() => {\n          setFormAlert({\n            type: \"success\",\n            message: `Your email has been verified. You may now close this window.`\n          });\n        }).catch(error => {\n          setFormAlert({\n            type: \"error\",\n            message: error.message\n          });\n        });\n        break;\n\n      default:\n        setFormAlert({\n          type: \"error\",\n          message: \"Invalid mode parameter\"\n        });\n    }\n  }, [router]);\n  return /*#__PURE__*/React.createElement(PageLoader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, formAlert && /*#__PURE__*/React.createElement(FormAlert, {\n    type: formAlert.type,\n    message: formAlert.message,\n    style: {\n      maxWidth: \"500px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default FirebaseActionPage;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/pages/firebase-action.js"],"names":["React","useEffect","useState","PageLoader","FormAlert","handleRecoverEmail","handleVerifyEmail","useRouter","FirebaseActionPage","props","router","formAlert","setFormAlert","mode","oobCode","query","replace","then","originalEmail","type","message","catch","error","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,mBAAtD;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEY,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBJ,MAAM,CAACK,KAAjC,CADc,CAGd;AACA;AACA;;AACA,QAAI,CAACF,IAAL,EAAW,OANG,CAQd;;AACA,YAAQA,IAAR;AACE,WAAK,eAAL;AACE;AACAH,QAAAA,MAAM,CAACM,OAAP,CAAgB,4BAA2BF,OAAQ,EAAnD;AACA;;AACF,WAAK,cAAL;AACE;AACAT,QAAAA,kBAAkB,CAACS,OAAD,CAAlB,CACGG,IADH,CACSC,aAAD,IAAmB;AACvBN,UAAAA,YAAY,CAAC;AACXO,YAAAA,IAAI,EAAE,SADK;AAEXC,YAAAA,OAAO,EAAG,mCAAkCF,aAAc;AAF/C,WAAD,CAAZ;AAID,SANH,EAOGG,KAPH,CAOUC,KAAD,IAAW;AAChBV,UAAAA,YAAY,CAAC;AACXO,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,OAAO,EAAEE,KAAK,CAACF;AAFJ,WAAD,CAAZ;AAID,SAZH;AAaA;;AACF,WAAK,aAAL;AACE;AACAd,QAAAA,iBAAiB,CAACQ,OAAD,CAAjB,CACGG,IADH,CACQ,MAAM;AACVL,UAAAA,YAAY,CAAC;AACXO,YAAAA,IAAI,EAAE,SADK;AAEXC,YAAAA,OAAO,EAAG;AAFC,WAAD,CAAZ;AAID,SANH,EAOGC,KAPH,CAOUC,KAAD,IAAW;AAChBV,UAAAA,YAAY,CAAC;AACXO,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,OAAO,EAAEE,KAAK,CAACF;AAFJ,WAAD,CAAZ;AAID,SAZH;AAaA;;AACF;AACER,QAAAA,YAAY,CAAC;AACXO,UAAAA,IAAI,EAAE,OADK;AAEXC,UAAAA,OAAO,EAAE;AAFE,SAAD,CAAZ;AAtCJ;AA2CD,GApDQ,EAoDN,CAACV,MAAD,CApDM,CAAT;AAsDA,sBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,SAAS,iBACR,oBAAC,SAAD;AACE,IAAA,IAAI,EAAEA,SAAS,CAACQ,IADlB;AAEE,IAAA,OAAO,EAAER,SAAS,CAACS,OAFrB;AAGE,IAAA,KAAK,EAAE;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF;AAWD;;AAED,eAAef,kBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PageLoader from \"./../components/PageLoader\";\nimport FormAlert from \"./../components/FormAlert\";\nimport { handleRecoverEmail, handleVerifyEmail } from \"./../util/auth.js\";\nimport { useRouter } from \"./../util/router.js\";\n\nfunction FirebaseActionPage(props) {\n  const router = useRouter();\n  const [formAlert, setFormAlert] = useState();\n\n  useEffect(() => {\n    const { mode, oobCode } = router.query;\n\n    // Do nothing if mode param is undefined.\n    // Page may have been pre-rendered by server so won't have query values\n    // until it's actually run on client (as is the case if using Next.js)\n    if (!mode) return;\n\n    // Take action based on Firebase \"mode\" query param\n    switch (mode) {\n      case \"resetPassword\":\n        // Redirect to change password page\n        router.replace(`/auth/changepass?oobCode=${oobCode}`);\n        break;\n      case \"recoverEmail\":\n        // Reset to original email\n        handleRecoverEmail(oobCode)\n          .then((originalEmail) => {\n            setFormAlert({\n              type: \"success\",\n              message: `Your email has been set back to ${originalEmail}. We've also sent you a password reset email so that you can change your password if you think someone may have access to your account.`,\n            });\n          })\n          .catch((error) => {\n            setFormAlert({\n              type: \"error\",\n              message: error.message,\n            });\n          });\n        break;\n      case \"verifyEmail\":\n        // Verify email in Firebase\n        handleVerifyEmail(oobCode)\n          .then(() => {\n            setFormAlert({\n              type: \"success\",\n              message: `Your email has been verified. You may now close this window.`,\n            });\n          })\n          .catch((error) => {\n            setFormAlert({\n              type: \"error\",\n              message: error.message,\n            });\n          });\n        break;\n      default:\n        setFormAlert({\n          type: \"error\",\n          message: \"Invalid mode parameter\",\n        });\n    }\n  }, [router]);\n\n  return (\n    <PageLoader>\n      {formAlert && (\n        <FormAlert\n          type={formAlert.type}\n          message={formAlert.message}\n          style={{ maxWidth: \"500px\" }}\n        />\n      )}\n    </PageLoader>\n  );\n}\n\nexport default FirebaseActionPage;\n"]},"metadata":{},"sourceType":"module"}