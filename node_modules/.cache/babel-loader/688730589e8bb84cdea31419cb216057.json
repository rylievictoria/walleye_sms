{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/util/auth.js\";\nimport React, { useState, useEffect, useMemo, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport firebase from \"./firebase\";\nimport { useUser, createUser, updateUser } from \"./db\";\nimport { history } from \"./router\";\nimport PageLoader from \"./../components/PageLoader\";\nimport { getFriendlyPlanId } from \"./prices\";\nimport analytics from \"./analytics\"; // Whether to merge extra user data from database into auth.user\n\nconst MERGE_DB_USER = true; // Whether to send email verification on signup\n\nconst EMAIL_VERIFICATION = true; // Whether to connect analytics session to user.uid\n\nconst ANALYTICS_IDENTIFY = true;\nconst authContext = createContext(); // Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return /*#__PURE__*/React.createElement(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }, children);\n} // Hook that enables any component to subscribe to auth state\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  // Store auth user object\n  const [user, setUser] = useState(null); // Format final user object and merge extra data from database\n\n  const finalUser = usePrepareUser(user); // Connect analytics session to user\n\n  useIdentifyUser(finalUser); // Handle response from authentication functions\n\n  const handleAuth = async response => {\n    const {\n      user,\n      additionalUserInfo\n    } = response; // Ensure Firebase is actually ready before we continue\n\n    await waitForFirebase(); // Create the user in the database if they are new\n\n    if (additionalUserInfo.isNewUser) {\n      await createUser(user.uid, {\n        email: user.email\n      }); // Send email verification if enabled\n\n      if (EMAIL_VERIFICATION) {\n        firebase.auth().currentUser.sendEmailVerification();\n      }\n    } // Update user in state\n\n\n    setUser(user);\n    return user;\n  };\n\n  const signup = (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(handleAuth);\n  };\n\n  const signin = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(handleAuth);\n  };\n\n  const signinWithProvider = name => {\n    // Get provider data by name (\"password\", \"google\", etc)\n    const providerData = allProviders.find(p => p.name === name);\n    const provider = new providerData.providerMethod();\n\n    if (providerData.parameters) {\n      provider.setCustomParameters(providerData.parameters);\n    }\n\n    return firebase.auth().signInWithPopup(provider).then(handleAuth);\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut();\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase.auth().sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n    return firebase.auth().confirmPasswordReset(resetCode, password);\n  };\n\n  const updateEmail = email => {\n    return firebase.auth().currentUser.updateEmail(email).then(() => {\n      // Update user in state (since onAuthStateChanged doesn't get called)\n      setUser(firebase.auth().currentUser);\n    });\n  };\n\n  const updatePassword = password => {\n    return firebase.auth().currentUser.updatePassword(password);\n  }; // Update auth user and persist to database (including any custom values in data)\n  // Forms can call this function instead of multiple auth/db update functions\n\n\n  const updateProfile = async data => {\n    const {\n      email,\n      name,\n      picture,\n      sheetLink,\n      phoneCol,\n      messages,\n      requests\n    } = data; // Update auth email\n\n    if (email) {\n      await firebase.auth().currentUser.updateEmail(email);\n    } // Update auth profile fields\n\n\n    if (name || picture) {\n      let fields = {};\n      if (name) fields.displayName = name;\n      if (picture) fields.photoURL = picture;\n      if (sheetLink) fields.sheetURL = sheetLink;\n      if (phoneCol) fields.phoneColumn = phoneCol;\n      if (messages) fields.messages = messages;\n      await firebase.auth().currentUser.updateProfile(fields);\n    } // Persist all data to the database\n\n\n    await updateUser(user.uid, data); // Update user in state\n\n    setUser(firebase.auth().currentUser);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Unsubscribe on cleanup\n\n    return () => unsubscribe();\n  }, []);\n  return {\n    user: finalUser,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword,\n    updateProfile\n  };\n} // Format final user object and merge extra data from database\n\n\nfunction usePrepareUser(user) {\n  // Fetch extra data from database (if enabled and auth user has been fetched)\n  const userDbQuery = useUser(MERGE_DB_USER && user && user.uid); // Memoize so we only create a new object if user or userDbQuery changes\n\n  return useMemo(() => {\n    // Return if auth user is null (loading) or false (not authenticated)\n    if (!user) return user; // Data we want to include from auth user object\n\n    let finalUser = {\n      uid: user.uid,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      name: user.displayName,\n      picture: user.photoURL\n    }; // Include an array of user's auth providers, such as [\"password\", \"google\", etc]\n    // Components can read this to prompt user to re-auth with the correct provider\n\n    finalUser.providers = user.providerData.map(({\n      providerId\n    }) => {\n      return allProviders.find(p => p.id === providerId).name;\n    }); // If merging user data from database is enabled ...\n\n    if (MERGE_DB_USER) {\n      switch (userDbQuery.status) {\n        case \"idle\":\n          // Return null user until we have db data to merge\n          return null;\n\n        case \"loading\":\n          return null;\n\n        case \"error\":\n          // Log query error to console\n          console.error(userDbQuery.error);\n          return null;\n\n        case \"success\":\n          // If user data doesn't exist we assume this means user just signed up and the createUser\n          // function just hasn't completed. We return null to indicate a loading state.\n          if (userDbQuery.data === null) return null; // Merge user data from database into finalUser object\n\n          Object.assign(finalUser, userDbQuery.data); // Get values we need for setting up some custom fields below\n\n          const {\n            stripePriceId,\n            stripeSubscriptionStatus\n          } = userDbQuery.data; // Add planId field (such as \"basic\", \"premium\", etc) based on stripePriceId\n\n          if (stripePriceId) {\n            finalUser.planId = getFriendlyPlanId(stripePriceId);\n          } // Add planIsActive field and set to true if subscription status is \"active\" or \"trialing\"\n\n\n          finalUser.planIsActive = [\"active\", \"trialing\"].includes(stripeSubscriptionStatus);\n        // no default\n      }\n    }\n\n    return finalUser;\n  }, [user, userDbQuery]);\n} // A Higher Order Component for requiring authentication\n\n\nexport const requireAuth = Component => {\n  return props => {\n    // Get authenticated user\n    const auth = useAuth();\n    useEffect(() => {\n      // Redirect if not signed in\n      if (auth.user === false) {\n        history.replace(\"/auth/signin\");\n      }\n    }, [auth]); // Show loading indicator\n    // We're either loading (user is null) or we're about to redirect (user is false)\n\n    if (!auth.user) {\n      return /*#__PURE__*/React.createElement(PageLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 14\n        }\n      });\n    } // Render component now that we have user\n\n\n    return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 12\n      }\n    }));\n  };\n}; // Handle Firebase email link for reverting to original email\n\nexport const handleRecoverEmail = code => {\n  let originalEmail;\n  return firebase.auth().checkActionCode(code).then(info => {\n    originalEmail = info.data.email; // Revert to original email by applying action code\n\n    return firebase.auth().applyActionCode(code);\n  }).then(() => {\n    // Send password reset email so user can change their pass if they\n    // think someone else has access to their account.\n    return firebase.auth().sendPasswordResetEmail(originalEmail);\n  }).then(() => {\n    // Return original email so it can be displayed by calling component\n    return originalEmail;\n  });\n}; // Handle Firebase email link for verifying email\n\nexport const handleVerifyEmail = code => {\n  return firebase.auth().applyActionCode(code);\n};\nconst allProviders = [{\n  id: \"password\",\n  name: \"password\"\n}, {\n  id: \"google.com\",\n  name: \"google\",\n  providerMethod: firebase.auth.GoogleAuthProvider\n}, {\n  id: \"facebook.com\",\n  name: \"facebook\",\n  providerMethod: firebase.auth.FacebookAuthProvider,\n  parameters: {\n    // Tell fb to show popup size UI instead of full website\n    display: \"popup\"\n  }\n}, {\n  id: \"twitter.com\",\n  name: \"twitter\",\n  providerMethod: firebase.auth.TwitterAuthProvider\n}, {\n  id: \"github.com\",\n  name: \"github\",\n  providerMethod: firebase.auth.GithubAuthProvider\n}]; // Connect analytics session to current user.uid\n\nfunction useIdentifyUser(user) {\n  useEffect(() => {\n    if (ANALYTICS_IDENTIFY && user) {\n      analytics.identify(user.uid);\n    }\n  }, [user]);\n} // Waits on Firebase user to be initialized before resolving promise\n// This is used to ensure auth is ready before any writing to the db can happen\n\n\nconst waitForFirebase = () => {\n  return new Promise(resolve => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        resolve(user); // Resolve promise when we have a user\n\n        unsubscribe(); // Prevent from firing again\n      }\n    });\n  });\n};\n\nconst getFromQueryString = key => {\n  return queryString.parse(window.location.search)[key];\n};","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/auth.js"],"names":["React","useState","useEffect","useMemo","useContext","createContext","queryString","firebase","useUser","createUser","updateUser","history","PageLoader","getFriendlyPlanId","analytics","MERGE_DB_USER","EMAIL_VERIFICATION","ANALYTICS_IDENTIFY","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","finalUser","usePrepareUser","useIdentifyUser","handleAuth","response","additionalUserInfo","waitForFirebase","isNewUser","uid","email","currentUser","sendEmailVerification","signup","password","createUserWithEmailAndPassword","then","signin","signInWithEmailAndPassword","signinWithProvider","name","providerData","allProviders","find","p","provider","providerMethod","parameters","setCustomParameters","signInWithPopup","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","resetCode","getFromQueryString","updateEmail","updatePassword","updateProfile","data","picture","sheetLink","phoneCol","messages","requests","fields","displayName","photoURL","sheetURL","phoneColumn","unsubscribe","onAuthStateChanged","userDbQuery","emailVerified","providers","map","providerId","id","status","console","error","Object","assign","stripePriceId","stripeSubscriptionStatus","planId","planIsActive","includes","requireAuth","Component","props","replace","handleRecoverEmail","originalEmail","checkActionCode","info","applyActionCode","handleVerifyEmail","GoogleAuthProvider","FacebookAuthProvider","display","TwitterAuthProvider","GithubAuthProvider","identify","Promise","resolve","key","parse","window","location","search"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,OAHF,EAIEC,UAJF,EAKEC,aALF,QAMO,OANP;AAOA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,UAA9B,QAAgD,MAAhD;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,IAAtB,C,CACA;;AACA,MAAMC,kBAAkB,GAAG,IAA3B,C,CACA;;AACA,MAAMC,kBAAkB,GAAG,IAA3B;AAEA,MAAMC,WAAW,GAAGb,aAAa,EAAjC,C,CAEA;AACA;;AACA,OAAO,SAASc,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmC;AACxC,QAAMC,IAAI,GAAGC,cAAc,EAA3B;AACA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCD,QAApC,CAAP;AACD,C,CAED;;AACA,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAOnB,UAAU,CAACc,WAAD,CAAjB;AACD,CAFM,C,CAIP;;AACA,SAASI,cAAT,GAA0B;AACxB;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,IAAD,CAAhC,CAFwB,CAIxB;;AACA,QAAMyB,SAAS,GAAGC,cAAc,CAACH,IAAD,CAAhC,CALwB,CAOxB;;AACAI,EAAAA,eAAe,CAACF,SAAD,CAAf,CARwB,CAUxB;;AACA,QAAMG,UAAU,GAAG,MAAOC,QAAP,IAAoB;AACrC,UAAM;AAAEN,MAAAA,IAAF;AAAQO,MAAAA;AAAR,QAA+BD,QAArC,CADqC,CAGrC;;AACA,UAAME,eAAe,EAArB,CAJqC,CAMrC;;AACA,QAAID,kBAAkB,CAACE,SAAvB,EAAkC;AAChC,YAAMxB,UAAU,CAACe,IAAI,CAACU,GAAN,EAAW;AAAEC,QAAAA,KAAK,EAAEX,IAAI,CAACW;AAAd,OAAX,CAAhB,CADgC,CAGhC;;AACA,UAAInB,kBAAJ,EAAwB;AACtBT,QAAAA,QAAQ,CAACc,IAAT,GAAgBe,WAAhB,CAA4BC,qBAA5B;AACD;AACF,KAdoC,CAgBrC;;;AACAZ,IAAAA,OAAO,CAACD,IAAD,CAAP;AACA,WAAOA,IAAP;AACD,GAnBD;;AAqBA,QAAMc,MAAM,GAAG,CAACH,KAAD,EAAQI,QAAR,KAAqB;AAClC,WAAOhC,QAAQ,CACZc,IADI,GAEJmB,8BAFI,CAE2BL,KAF3B,EAEkCI,QAFlC,EAGJE,IAHI,CAGCZ,UAHD,CAAP;AAID,GALD;;AAOA,QAAMa,MAAM,GAAG,CAACP,KAAD,EAAQI,QAAR,KAAqB;AAClC,WAAOhC,QAAQ,CACZc,IADI,GAEJsB,0BAFI,CAEuBR,KAFvB,EAE8BI,QAF9B,EAGJE,IAHI,CAGCZ,UAHD,CAAP;AAID,GALD;;AAOA,QAAMe,kBAAkB,GAAIC,IAAD,IAAU;AACnC;AACA,UAAMC,YAAY,GAAGC,YAAY,CAACC,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACJ,IAAF,KAAWA,IAApC,CAArB;AAEA,UAAMK,QAAQ,GAAG,IAAIJ,YAAY,CAACK,cAAjB,EAAjB;;AAEA,QAAIL,YAAY,CAACM,UAAjB,EAA6B;AAC3BF,MAAAA,QAAQ,CAACG,mBAAT,CAA6BP,YAAY,CAACM,UAA1C;AACD;;AAED,WAAO7C,QAAQ,CAACc,IAAT,GAAgBiC,eAAhB,CAAgCJ,QAAhC,EAA0CT,IAA1C,CAA+CZ,UAA/C,CAAP;AACD,GAXD;;AAaA,QAAM0B,OAAO,GAAG,MAAM;AACpB,WAAOhD,QAAQ,CAACc,IAAT,GAAgBmC,OAAhB,EAAP;AACD,GAFD;;AAIA,QAAMC,sBAAsB,GAAItB,KAAD,IAAW;AACxC,WAAO5B,QAAQ,CAACc,IAAT,GAAgBoC,sBAAhB,CAAuCtB,KAAvC,CAAP;AACD,GAFD;;AAIA,QAAMuB,oBAAoB,GAAG,CAACnB,QAAD,EAAWoB,IAAX,KAAoB;AAC/C;AACA,UAAMC,SAAS,GAAGD,IAAI,IAAIE,kBAAkB,CAAC,SAAD,CAA5C;AAEA,WAAOtD,QAAQ,CAACc,IAAT,GAAgBqC,oBAAhB,CAAqCE,SAArC,EAAgDrB,QAAhD,CAAP;AACD,GALD;;AAOA,QAAMuB,WAAW,GAAI3B,KAAD,IAAW;AAC7B,WAAO5B,QAAQ,CACZc,IADI,GAEJe,WAFI,CAEQ0B,WAFR,CAEoB3B,KAFpB,EAGJM,IAHI,CAGC,MAAM;AACV;AACAhB,MAAAA,OAAO,CAAClB,QAAQ,CAACc,IAAT,GAAgBe,WAAjB,CAAP;AACD,KANI,CAAP;AAOD,GARD;;AAUA,QAAM2B,cAAc,GAAIxB,QAAD,IAAc;AACnC,WAAOhC,QAAQ,CAACc,IAAT,GAAgBe,WAAhB,CAA4B2B,cAA5B,CAA2CxB,QAA3C,CAAP;AACD,GAFD,CApFwB,CAwFxB;AACA;;;AACA,QAAMyB,aAAa,GAAG,MAAOC,IAAP,IAAgB;AACpC,UAAM;AAAE9B,MAAAA,KAAF;AAASU,MAAAA,IAAT;AAAeqB,MAAAA,OAAf;AAAwBC,MAAAA,SAAxB;AAAmCC,MAAAA,QAAnC;AAA6CC,MAAAA,QAA7C;AAAuDC,MAAAA;AAAvD,QAAoEL,IAA1E,CADoC,CAGpC;;AACA,QAAI9B,KAAJ,EAAW;AACT,YAAM5B,QAAQ,CAACc,IAAT,GAAgBe,WAAhB,CAA4B0B,WAA5B,CAAwC3B,KAAxC,CAAN;AACD,KANmC,CAQpC;;;AACA,QAAIU,IAAI,IAAIqB,OAAZ,EAAqB;AACnB,UAAIK,MAAM,GAAG,EAAb;AACA,UAAI1B,IAAJ,EAAU0B,MAAM,CAACC,WAAP,GAAqB3B,IAArB;AACV,UAAIqB,OAAJ,EAAaK,MAAM,CAACE,QAAP,GAAkBP,OAAlB;AACb,UAAIC,SAAJ,EAAeI,MAAM,CAACG,QAAP,GAAkBP,SAAlB;AACf,UAAIC,QAAJ,EAAcG,MAAM,CAACI,WAAP,GAAqBP,QAArB;AACd,UAAIC,QAAJ,EAAcE,MAAM,CAACF,QAAP,GAAkBA,QAAlB;AACd,YAAM9D,QAAQ,CAACc,IAAT,GAAgBe,WAAhB,CAA4B4B,aAA5B,CAA0CO,MAA1C,CAAN;AACD,KAjBmC,CAmBpC;;;AACA,UAAM7D,UAAU,CAACc,IAAI,CAACU,GAAN,EAAW+B,IAAX,CAAhB,CApBoC,CAsBpC;;AACAxC,IAAAA,OAAO,CAAClB,QAAQ,CAACc,IAAT,GAAgBe,WAAjB,CAAP;AACD,GAxBD;;AA0BAlC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM0E,WAAW,GAAGrE,QAAQ,CAACc,IAAT,GAAgBwD,kBAAhB,CAAoCrD,IAAD,IAAU;AAC/D,UAAIA,IAAJ,EAAU;AACRC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KANmB,CAApB,CAFc,CAUd;;AACA,WAAO,MAAMmD,WAAW,EAAxB;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAO;AACLpD,IAAAA,IAAI,EAAEE,SADD;AAELY,IAAAA,MAFK;AAGLI,IAAAA,MAHK;AAILE,IAAAA,kBAJK;AAKLW,IAAAA,OALK;AAMLE,IAAAA,sBANK;AAOLC,IAAAA,oBAPK;AAQLI,IAAAA,WARK;AASLC,IAAAA,cATK;AAULC,IAAAA;AAVK,GAAP;AAYD,C,CAED;;;AACA,SAASrC,cAAT,CAAwBH,IAAxB,EAA8B;AAC5B;AACA,QAAMsD,WAAW,GAAGtE,OAAO,CAACO,aAAa,IAAIS,IAAjB,IAAyBA,IAAI,CAACU,GAA/B,CAA3B,CAF4B,CAI5B;;AACA,SAAO/B,OAAO,CAAC,MAAM;AACnB;AACA,QAAI,CAACqB,IAAL,EAAW,OAAOA,IAAP,CAFQ,CAInB;;AACA,QAAIE,SAAS,GAAG;AACdQ,MAAAA,GAAG,EAAEV,IAAI,CAACU,GADI;AAEdC,MAAAA,KAAK,EAAEX,IAAI,CAACW,KAFE;AAGd4C,MAAAA,aAAa,EAAEvD,IAAI,CAACuD,aAHN;AAIdlC,MAAAA,IAAI,EAAErB,IAAI,CAACgD,WAJG;AAKdN,MAAAA,OAAO,EAAE1C,IAAI,CAACiD;AALA,KAAhB,CALmB,CAanB;AACA;;AACA/C,IAAAA,SAAS,CAACsD,SAAV,GAAsBxD,IAAI,CAACsB,YAAL,CAAkBmC,GAAlB,CAAsB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAoB;AAC9D,aAAOnC,YAAY,CAACC,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACkC,EAAF,KAASD,UAAlC,EAA8CrC,IAArD;AACD,KAFqB,CAAtB,CAfmB,CAmBnB;;AACA,QAAI9B,aAAJ,EAAmB;AACjB,cAAQ+D,WAAW,CAACM,MAApB;AACE,aAAK,MAAL;AACE;AACA,iBAAO,IAAP;;AACF,aAAK,SAAL;AACE,iBAAO,IAAP;;AACF,aAAK,OAAL;AACE;AACAC,UAAAA,OAAO,CAACC,KAAR,CAAcR,WAAW,CAACQ,KAA1B;AACA,iBAAO,IAAP;;AACF,aAAK,SAAL;AACE;AACA;AACA,cAAIR,WAAW,CAACb,IAAZ,KAAqB,IAAzB,EAA+B,OAAO,IAAP,CAHjC,CAKE;;AACAsB,UAAAA,MAAM,CAACC,MAAP,CAAc9D,SAAd,EAAyBoD,WAAW,CAACb,IAArC,EANF,CAQE;;AACA,gBAAM;AAAEwB,YAAAA,aAAF;AAAiBC,YAAAA;AAAjB,cAA8CZ,WAAW,CAACb,IAAhE,CATF,CAWE;;AACA,cAAIwB,aAAJ,EAAmB;AACjB/D,YAAAA,SAAS,CAACiE,MAAV,GAAmB9E,iBAAiB,CAAC4E,aAAD,CAApC;AACD,WAdH,CAgBE;;;AACA/D,UAAAA,SAAS,CAACkE,YAAV,GAAyB,CAAC,QAAD,EAAW,UAAX,EAAuBC,QAAvB,CACvBH,wBADuB,CAAzB;AAIF;AA/BF;AAiCD;;AAED,WAAOhE,SAAP;AACD,GAzDa,EAyDX,CAACF,IAAD,EAAOsD,WAAP,CAzDW,CAAd;AA0DD,C,CAED;;;AACA,OAAO,MAAMgB,WAAW,GAAIC,SAAD,IAAe;AACxC,SAAQC,KAAD,IAAW;AAChB;AACA,UAAM3E,IAAI,GAAGE,OAAO,EAApB;AAEArB,IAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAImB,IAAI,CAACG,IAAL,KAAc,KAAlB,EAAyB;AACvBb,QAAAA,OAAO,CAACsF,OAAR,CAAgB,cAAhB;AACD;AACF,KALQ,EAKN,CAAC5E,IAAD,CALM,CAAT,CAJgB,CAWhB;AACA;;AACA,QAAI,CAACA,IAAI,CAACG,IAAV,EAAgB;AACd,0BAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAfe,CAiBhB;;;AACA,wBAAO,oBAAC,SAAD,oBAAewE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAnBD;AAoBD,CArBM,C,CAuBP;;AACA,OAAO,MAAME,kBAAkB,GAAIvC,IAAD,IAAU;AAC1C,MAAIwC,aAAJ;AACA,SAAO5F,QAAQ,CACZc,IADI,GAEJ+E,eAFI,CAEYzC,IAFZ,EAGJlB,IAHI,CAGE4D,IAAD,IAAU;AACdF,IAAAA,aAAa,GAAGE,IAAI,CAACpC,IAAL,CAAU9B,KAA1B,CADc,CAEd;;AACA,WAAO5B,QAAQ,CAACc,IAAT,GAAgBiF,eAAhB,CAAgC3C,IAAhC,CAAP;AACD,GAPI,EAQJlB,IARI,CAQC,MAAM;AACV;AACA;AACA,WAAOlC,QAAQ,CAACc,IAAT,GAAgBoC,sBAAhB,CAAuC0C,aAAvC,CAAP;AACD,GAZI,EAaJ1D,IAbI,CAaC,MAAM;AACV;AACA,WAAO0D,aAAP;AACD,GAhBI,CAAP;AAiBD,CAnBM,C,CAqBP;;AACA,OAAO,MAAMI,iBAAiB,GAAI5C,IAAD,IAAU;AACzC,SAAOpD,QAAQ,CAACc,IAAT,GAAgBiF,eAAhB,CAAgC3C,IAAhC,CAAP;AACD,CAFM;AAIP,MAAMZ,YAAY,GAAG,CACnB;AACEoC,EAAAA,EAAE,EAAE,UADN;AAEEtC,EAAAA,IAAI,EAAE;AAFR,CADmB,EAKnB;AACEsC,EAAAA,EAAE,EAAE,YADN;AAEEtC,EAAAA,IAAI,EAAE,QAFR;AAGEM,EAAAA,cAAc,EAAE5C,QAAQ,CAACc,IAAT,CAAcmF;AAHhC,CALmB,EAUnB;AACErB,EAAAA,EAAE,EAAE,cADN;AAEEtC,EAAAA,IAAI,EAAE,UAFR;AAGEM,EAAAA,cAAc,EAAE5C,QAAQ,CAACc,IAAT,CAAcoF,oBAHhC;AAIErD,EAAAA,UAAU,EAAE;AACV;AACAsD,IAAAA,OAAO,EAAE;AAFC;AAJd,CAVmB,EAmBnB;AACEvB,EAAAA,EAAE,EAAE,aADN;AAEEtC,EAAAA,IAAI,EAAE,SAFR;AAGEM,EAAAA,cAAc,EAAE5C,QAAQ,CAACc,IAAT,CAAcsF;AAHhC,CAnBmB,EAwBnB;AACExB,EAAAA,EAAE,EAAE,YADN;AAEEtC,EAAAA,IAAI,EAAE,QAFR;AAGEM,EAAAA,cAAc,EAAE5C,QAAQ,CAACc,IAAT,CAAcuF;AAHhC,CAxBmB,CAArB,C,CA+BA;;AACA,SAAShF,eAAT,CAAyBJ,IAAzB,EAA+B;AAC7BtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,kBAAkB,IAAIO,IAA1B,EAAgC;AAC9BV,MAAAA,SAAS,CAAC+F,QAAV,CAAmBrF,IAAI,CAACU,GAAxB;AACD;AACF,GAJQ,EAIN,CAACV,IAAD,CAJM,CAAT;AAKD,C,CAED;AACA;;;AACA,MAAMQ,eAAe,GAAG,MAAM;AAC5B,SAAO,IAAI8E,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMnC,WAAW,GAAGrE,QAAQ,CAACc,IAAT,GAAgBwD,kBAAhB,CAAoCrD,IAAD,IAAU;AAC/D,UAAIA,IAAJ,EAAU;AACRuF,QAAAA,OAAO,CAACvF,IAAD,CAAP,CADQ,CACO;;AACfoD,QAAAA,WAAW,GAFH,CAEO;AAChB;AACF,KALmB,CAApB;AAMD,GAPM,CAAP;AAQD,CATD;;AAWA,MAAMf,kBAAkB,GAAImD,GAAD,IAAS;AAClC,SAAO1G,WAAW,CAAC2G,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAlC,EAA0CJ,GAA1C,CAAP;AACD,CAFD","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useContext,\n  createContext,\n} from \"react\";\nimport queryString from \"query-string\";\nimport firebase from \"./firebase\";\nimport { useUser, createUser, updateUser } from \"./db\";\nimport { history } from \"./router\";\nimport PageLoader from \"./../components/PageLoader\";\nimport { getFriendlyPlanId } from \"./prices\";\nimport analytics from \"./analytics\";\n\n// Whether to merge extra user data from database into auth.user\nconst MERGE_DB_USER = true;\n// Whether to send email verification on signup\nconst EMAIL_VERIFICATION = true;\n// Whether to connect analytics session to user.uid\nconst ANALYTICS_IDENTIFY = true;\n\nconst authContext = createContext();\n\n// Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook that enables any component to subscribe to auth state\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  // Store auth user object\n  const [user, setUser] = useState(null);\n\n  // Format final user object and merge extra data from database\n  const finalUser = usePrepareUser(user);\n\n  // Connect analytics session to user\n  useIdentifyUser(finalUser);\n\n  // Handle response from authentication functions\n  const handleAuth = async (response) => {\n    const { user, additionalUserInfo } = response;\n\n    // Ensure Firebase is actually ready before we continue\n    await waitForFirebase();\n\n    // Create the user in the database if they are new\n    if (additionalUserInfo.isNewUser) {\n      await createUser(user.uid, { email: user.email });\n\n      // Send email verification if enabled\n      if (EMAIL_VERIFICATION) {\n        firebase.auth().currentUser.sendEmailVerification();\n      }\n    }\n\n    // Update user in state\n    setUser(user);\n    return user;\n  };\n\n  const signup = (email, password) => {\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(handleAuth);\n  };\n\n  const signin = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(handleAuth);\n  };\n\n  const signinWithProvider = (name) => {\n    // Get provider data by name (\"password\", \"google\", etc)\n    const providerData = allProviders.find((p) => p.name === name);\n\n    const provider = new providerData.providerMethod();\n\n    if (providerData.parameters) {\n      provider.setCustomParameters(providerData.parameters);\n    }\n\n    return firebase.auth().signInWithPopup(provider).then(handleAuth);\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut();\n  };\n\n  const sendPasswordResetEmail = (email) => {\n    return firebase.auth().sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n\n    return firebase.auth().confirmPasswordReset(resetCode, password);\n  };\n\n  const updateEmail = (email) => {\n    return firebase\n      .auth()\n      .currentUser.updateEmail(email)\n      .then(() => {\n        // Update user in state (since onAuthStateChanged doesn't get called)\n        setUser(firebase.auth().currentUser);\n      });\n  };\n\n  const updatePassword = (password) => {\n    return firebase.auth().currentUser.updatePassword(password);\n  };\n\n  // Update auth user and persist to database (including any custom values in data)\n  // Forms can call this function instead of multiple auth/db update functions\n  const updateProfile = async (data) => {\n    const { email, name, picture, sheetLink, phoneCol, messages, requests } = data;\n\n    // Update auth email\n    if (email) {\n      await firebase.auth().currentUser.updateEmail(email);\n    }\n\n    // Update auth profile fields\n    if (name || picture) {\n      let fields = {};\n      if (name) fields.displayName = name;\n      if (picture) fields.photoURL = picture;\n      if (sheetLink) fields.sheetURL = sheetLink;\n      if (phoneCol) fields.phoneColumn = phoneCol;\n      if (messages) fields.messages = messages;\n      await firebase.auth().currentUser.updateProfile(fields);\n    }\n\n    // Persist all data to the database\n    await updateUser(user.uid, data);\n\n    // Update user in state\n    setUser(firebase.auth().currentUser);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    });\n\n    // Unsubscribe on cleanup\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user: finalUser,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword,\n    updateProfile,\n  };\n}\n\n// Format final user object and merge extra data from database\nfunction usePrepareUser(user) {\n  // Fetch extra data from database (if enabled and auth user has been fetched)\n  const userDbQuery = useUser(MERGE_DB_USER && user && user.uid);\n\n  // Memoize so we only create a new object if user or userDbQuery changes\n  return useMemo(() => {\n    // Return if auth user is null (loading) or false (not authenticated)\n    if (!user) return user;\n\n    // Data we want to include from auth user object\n    let finalUser = {\n      uid: user.uid,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      name: user.displayName,\n      picture: user.photoURL,\n    };\n\n    // Include an array of user's auth providers, such as [\"password\", \"google\", etc]\n    // Components can read this to prompt user to re-auth with the correct provider\n    finalUser.providers = user.providerData.map(({ providerId }) => {\n      return allProviders.find((p) => p.id === providerId).name;\n    });\n\n    // If merging user data from database is enabled ...\n    if (MERGE_DB_USER) {\n      switch (userDbQuery.status) {\n        case \"idle\":\n          // Return null user until we have db data to merge\n          return null;\n        case \"loading\":\n          return null;\n        case \"error\":\n          // Log query error to console\n          console.error(userDbQuery.error);\n          return null;\n        case \"success\":\n          // If user data doesn't exist we assume this means user just signed up and the createUser\n          // function just hasn't completed. We return null to indicate a loading state.\n          if (userDbQuery.data === null) return null;\n\n          // Merge user data from database into finalUser object\n          Object.assign(finalUser, userDbQuery.data);\n\n          // Get values we need for setting up some custom fields below\n          const { stripePriceId, stripeSubscriptionStatus } = userDbQuery.data;\n\n          // Add planId field (such as \"basic\", \"premium\", etc) based on stripePriceId\n          if (stripePriceId) {\n            finalUser.planId = getFriendlyPlanId(stripePriceId);\n          }\n\n          // Add planIsActive field and set to true if subscription status is \"active\" or \"trialing\"\n          finalUser.planIsActive = [\"active\", \"trialing\"].includes(\n            stripeSubscriptionStatus\n          );\n\n        // no default\n      }\n    }\n\n    return finalUser;\n  }, [user, userDbQuery]);\n}\n\n// A Higher Order Component for requiring authentication\nexport const requireAuth = (Component) => {\n  return (props) => {\n    // Get authenticated user\n    const auth = useAuth();\n\n    useEffect(() => {\n      // Redirect if not signed in\n      if (auth.user === false) {\n        history.replace(\"/auth/signin\");\n      }\n    }, [auth]);\n\n    // Show loading indicator\n    // We're either loading (user is null) or we're about to redirect (user is false)\n    if (!auth.user) {\n      return <PageLoader />;\n    }\n\n    // Render component now that we have user\n    return <Component {...props} />;\n  };\n};\n\n// Handle Firebase email link for reverting to original email\nexport const handleRecoverEmail = (code) => {\n  let originalEmail;\n  return firebase\n    .auth()\n    .checkActionCode(code)\n    .then((info) => {\n      originalEmail = info.data.email;\n      // Revert to original email by applying action code\n      return firebase.auth().applyActionCode(code);\n    })\n    .then(() => {\n      // Send password reset email so user can change their pass if they\n      // think someone else has access to their account.\n      return firebase.auth().sendPasswordResetEmail(originalEmail);\n    })\n    .then(() => {\n      // Return original email so it can be displayed by calling component\n      return originalEmail;\n    });\n};\n\n// Handle Firebase email link for verifying email\nexport const handleVerifyEmail = (code) => {\n  return firebase.auth().applyActionCode(code);\n};\n\nconst allProviders = [\n  {\n    id: \"password\",\n    name: \"password\",\n  },\n  {\n    id: \"google.com\",\n    name: \"google\",\n    providerMethod: firebase.auth.GoogleAuthProvider,\n  },\n  {\n    id: \"facebook.com\",\n    name: \"facebook\",\n    providerMethod: firebase.auth.FacebookAuthProvider,\n    parameters: {\n      // Tell fb to show popup size UI instead of full website\n      display: \"popup\",\n    },\n  },\n  {\n    id: \"twitter.com\",\n    name: \"twitter\",\n    providerMethod: firebase.auth.TwitterAuthProvider,\n  },\n  {\n    id: \"github.com\",\n    name: \"github\",\n    providerMethod: firebase.auth.GithubAuthProvider,\n  },\n];\n\n// Connect analytics session to current user.uid\nfunction useIdentifyUser(user) {\n  useEffect(() => {\n    if (ANALYTICS_IDENTIFY && user) {\n      analytics.identify(user.uid);\n    }\n  }, [user]);\n}\n\n// Waits on Firebase user to be initialized before resolving promise\n// This is used to ensure auth is ready before any writing to the db can happen\nconst waitForFirebase = () => {\n  return new Promise((resolve) => {\n    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        resolve(user); // Resolve promise when we have a user\n        unsubscribe(); // Prevent from firing again\n      }\n    });\n  });\n};\n\nconst getFromQueryString = (key) => {\n  return queryString.parse(window.location.search)[key];\n};\n"]},"metadata":{},"sourceType":"module"}