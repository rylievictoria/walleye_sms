{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/components/DashboardSms.js\";\nimport React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm, reset } from \"react-hook-form\";\nimport { getResponses, filterNumbers } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\nimport { sendSms } from \"../util/twilio.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [phoneCol, setPhoneCol] = useState(\"Number\");\n  const [deliveries, setDeliveries] = useState([]); // Need to find a good way to display\n\n  const [customers, setCustomers] = useState({\n    \"Name\": {\n      responses: [\"Rylie\", \"Jordan\"],\n      options: [\"Rylie\", \"Jordan\"]\n    },\n    \"Number\": {\n      responses: [\"+12624243872\", \"+6309010523\"],\n      options: [\"+2624243872\", \"+6309010523\"]\n    },\n    \"Pizza Topping\": {\n      responses: [\"Pepperoni\", [\"Cheese\", \"Sausage\"]],\n      options: [\"Pepperoni\", \"Cheese\", \"Sausage\"]\n    },\n    \"Favorite Color\": {\n      responses: [[\"Red\", \"Blue\"], \"Green\"],\n      options: [\"Red\", \"Blue\", \"Green\"]\n    }\n  });\n  const [formAlert, setFormAlert] = useState(null);\n  useEffect(() => {\n    if (auth.user.planIsActive && !auth.user.sheetLink) {\n      alert(\"You need to enter a sheet link first to not use default values!\");\n    } else if (auth.user.planIsActive && !auth.user.phoneCol) {\n      alert(\"You need to specify the phone number column first to not use default values!\");\n    } else if (!auth.user.planIsActive) {\n      alert(\"You need to sign up for a subscription not to use default values!\");\n    } else if (auth.user.planIsActive && auth.user.sheetLink && auth.user.phoneCol) {\n      setPending(true);\n      getResponses(auth.user.sheetLink).then(c => {\n        setCustomers(c);\n        setPhoneCol(auth.user.phoneCol);\n      }).catch(e => {\n        console.error('Error: ', e);\n      });\n      setPending(false);\n    } else {\n      // Alert that no subscription and should sign up\n      // Redirect to checkout?\n      console.log(auth.user);\n    }\n  }, [auth.user]);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    setPending(true);\n    setDeliveries([]);\n    const message = data.message;\n    const numbers = filterNumbers(data, customers, phoneCol);\n    console.log('Message: ' + message);\n    console.log('Numbers: ' + numbers); // Stripe checkout\n    // Use webhook for some flag to see if was successful\n    // Maybe have pending / loading icon while messages sending?\n    // Text request\n\n    numbers.forEach(num => {\n      sendSms(num, message).then(status => {\n        setDeliveries([{\n          to: status.to,\n          from: status.from,\n          body: status.body,\n          dateSent: status.dateSent,\n          errorMessage: status.errorMessage,\n          price: status.price\n        }, ...deliveries]);\n      }).catch(error => {\n        alert(error.message);\n      });\n    }); // Reset filters and what not\n\n    reset();\n    setPending(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, !pending && Object.entries(customers).map(([q, values]) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"is-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, q), values.options.map(a => /*#__PURE__*/React.createElement(FormField, {\n    id: a,\n    name: q + \"|||\" + a,\n    type: \"checkbox\",\n    inputRef: register(),\n    error: errors.q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(FormField, {\n    name: \"message\",\n    type: \"textarea\",\n    label: \"Please enter your SMS\",\n    placeholder: \"Write to your people\",\n    error: errors.message,\n    inputRef: register({\n      required: \"Please enter your text message to send!\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: pending ? \"loading\" : \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\nexport default DashboardSms;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/components/DashboardSms.js"],"names":["React","useState","useEffect","FormField","SectionButton","useAuth","useForm","reset","getResponses","filterNumbers","redirectToCheckout","sendSms","DashboardSms","props","auth","pending","setPending","phoneCol","setPhoneCol","deliveries","setDeliveries","customers","setCustomers","responses","options","formAlert","setFormAlert","user","planIsActive","sheetLink","alert","then","c","catch","e","console","error","log","register","handleSubmit","errors","onSubmit","data","message","numbers","forEach","num","status","to","from","body","dateSent","errorMessage","price","Object","entries","map","q","values","a","required","parentColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm, reset } from \"react-hook-form\";\nimport { getResponses, filterNumbers } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\nimport { sendSms } from \"../util/twilio.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [phoneCol, setPhoneCol] = useState(\"Number\");\n  const [deliveries, setDeliveries] = useState([]);  // Need to find a good way to display\n  const [customers, setCustomers] = useState({\n    \"Name\": {responses: [\"Rylie\", \"Jordan\"], options: [\"Rylie\", \"Jordan\"]},\n    \"Number\": {responses: [\"+12624243872\", \"+6309010523\"], options: [\"+2624243872\", \"+6309010523\"]},\n    \"Pizza Topping\": {responses: [\"Pepperoni\", [\"Cheese\", \"Sausage\"]], options: [\"Pepperoni\", \"Cheese\", \"Sausage\"]},\n    \"Favorite Color\": {responses: [[\"Red\", \"Blue\"], \"Green\"], options: [\"Red\", \"Blue\", \"Green\"]}\n  });\n  const [formAlert, setFormAlert] = useState(null);\n\n  useEffect(() => {\n      if (auth.user.planIsActive && !auth.user.sheetLink) {\n        alert(\"You need to enter a sheet link first to not use default values!\");\n      } else if (auth.user.planIsActive && !auth.user.phoneCol) {\n        alert(\"You need to specify the phone number column first to not use default values!\");\n      } else if (!auth.user.planIsActive) {\n        alert(\"You need to sign up for a subscription not to use default values!\");\n      } else if (auth.user.planIsActive && auth.user.sheetLink && auth.user.phoneCol) {\n        setPending(true);\n        getResponses(auth.user.sheetLink)\n        .then((c) => {\n          setCustomers(c);\n          setPhoneCol(auth.user.phoneCol);\n        })\n        .catch((e) => {\n          console.error('Error: ', e);\n        });\n        setPending(false);\n      }\n      else {\n        // Alert that no subscription and should sign up\n        // Redirect to checkout?\n        console.log(auth.user);\n      }\n    }, [auth.user]);\n\n  const { register, handleSubmit, errors, reset } = useForm();\n\n  const onSubmit = (data) => {\n    setPending(true);\n    setDeliveries([]);\n\n    const message = data.message;\n    const numbers = filterNumbers(data, customers, phoneCol);\n\n    console.log('Message: '+message);\n    console.log('Numbers: '+numbers);\n\n    // Stripe checkout\n    // Use webhook for some flag to see if was successful\n  \n    // Maybe have pending / loading icon while messages sending?\n\n    // Text request\n    numbers.forEach((num) => {\n      sendSms(num, message)\n      .then((status) => {\n          setDeliveries([{\n              to: status.to,\n              from: status.from,\n              body: status.body,\n              dateSent: status.dateSent,\n              errorMessage: status.errorMessage,\n              price: status.price\n          }, ...deliveries]);\n      })\n      .catch((error) => {\n          alert(error.message);\n      });\n    });\n\n    // Reset filters and what not\n    reset();\n    setPending(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {!pending && Object.entries(customers).map(([q, values]) => (\n          <div>\n              <h3 className=\"is-primary\">{q}</h3>\n              {values.options.map((a) => (\n                  <FormField\n                      id={a}\n                      name={q+\"|||\"+a}\n                      type=\"checkbox\"\n                      inputRef={register()}\n                      error={errors.q}\n                  />)\n              )}\n              <br />\n          </div>\n        )\n      )}\n      <FormField\n        name=\"message\"\n        type=\"textarea\"\n        label=\"Please enter your SMS\"\n        placeholder=\"Write to your people\"\n        error={errors.message}\n        inputRef={register({\n          required: \"Please enter your text message to send!\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Send\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardSms;\n"]},"metadata":{},"sourceType":"module"}