{"ast":null,"code":"import { apiRequest } from \"./util\";\nexport async function sendSms(number, message) {\n  // Create a twilio session\n  return await apiRequest(\"twilio-send-sms\", \"POST\", {\n    to: String(number),\n    // Need someway to enforce number format\n    message: message\n  });\n}\nexport function batchSms(numbers, message, auth_messages) {\n  let messages = []; // Text request\n\n  const requestSms = numbers.forEach(async num => {\n    await sendSms(num, message).then(status => {\n      messages.push({\n        to: status.to,\n        from: status.from,\n        body: status.body,\n        dateSent: status.dateSent,\n        errorMessage: status.errorMessage,\n        price: status.price\n      });\n      console.log(status);\n    }).catch(error => {\n      alert(error.message);\n    });\n  });\n  Promise.all(requestSms).then(() => {\n    messages = auth_messages ? [...messages, ...auth_messages] : messages;\n    console.log('messages');\n    console.log(messages);\n    return messages;\n  });\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/twilio.js"],"names":["apiRequest","sendSms","number","message","to","String","batchSms","numbers","auth_messages","messages","requestSms","forEach","num","then","status","push","from","body","dateSent","errorMessage","price","console","log","catch","error","alert","Promise","all"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AAEA,OAAO,eAAeC,OAAf,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AAC3C;AACA,SAAO,MAAMH,UAAU,CAAC,iBAAD,EAAoB,MAApB,EAA4B;AAC/CI,IAAAA,EAAE,EAAEC,MAAM,CAACH,MAAD,CADqC;AAC1B;AACrBC,IAAAA,OAAO,EAAEA;AAFsC,GAA5B,CAAvB;AAIH;AAED,OAAO,SAASG,QAAT,CAAkBC,OAAlB,EAA2BJ,OAA3B,EAAoCK,aAApC,EAAmD;AACtD,MAAIC,QAAQ,GAAG,EAAf,CADsD,CAGtD;;AACA,QAAMC,UAAU,GAAGH,OAAO,CAACI,OAAR,CAAgB,MAAOC,GAAP,IAAe;AAC9C,UAAMX,OAAO,CAACW,GAAD,EAAMT,OAAN,CAAP,CACLU,IADK,CACCC,MAAD,IAAY;AACdL,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACVX,QAAAA,EAAE,EAAEU,MAAM,CAACV,EADD;AAEVY,QAAAA,IAAI,EAAEF,MAAM,CAACE,IAFH;AAGVC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAHH;AAIVC,QAAAA,QAAQ,EAAEJ,MAAM,CAACI,QAJP;AAKVC,QAAAA,YAAY,EAAEL,MAAM,CAACK,YALX;AAMVC,QAAAA,KAAK,EAAEN,MAAM,CAACM;AANJ,OAAd;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACH,KAXK,EAYLS,KAZK,CAYEC,KAAD,IAAW;AACdC,MAAAA,KAAK,CAACD,KAAK,CAACrB,OAAP,CAAL;AACH,KAdK,CAAN;AAeH,GAhBkB,CAAnB;AAiBAuB,EAAAA,OAAO,CAACC,GAAR,CAAYjB,UAAZ,EAAwBG,IAAxB,CAA6B,MAAM;AAC/BJ,IAAAA,QAAQ,GAAGD,aAAa,GAAG,CAAC,GAAGC,QAAJ,EAAc,GAAGD,aAAjB,CAAH,GAAqCC,QAA7D;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACA,WAAOA,QAAP;AACH,GALD;AAMH","sourcesContent":["import { apiRequest } from \"./util\";\n\nexport async function sendSms(number, message) {\n    // Create a twilio session\n    return await apiRequest(\"twilio-send-sms\", \"POST\", {\n        to: String(number),  // Need someway to enforce number format\n        message: message\n    });\n}\n\nexport function batchSms(numbers, message, auth_messages) {\n    let messages = [];\n\n    // Text request\n    const requestSms = numbers.forEach(async (num) => {\n        await sendSms(num, message)\n        .then((status) => {\n            messages.push({\n                to: status.to,\n                from: status.from,\n                body: status.body,\n                dateSent: status.dateSent,\n                errorMessage: status.errorMessage,\n                price: status.price\n            });\n            console.log(status);\n        })\n        .catch((error) => {\n            alert(error.message);\n        });\n    });\n    Promise.all(requestSms).then(() => {\n        messages = auth_messages ? [...messages, ...auth_messages] : messages;\n        console.log('messages');\n        console.log(messages);\n        return messages;\n    });\n}"]},"metadata":{},"sourceType":"module"}