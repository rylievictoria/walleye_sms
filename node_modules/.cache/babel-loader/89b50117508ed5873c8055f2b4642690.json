{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/components/DashboardSms.js\";\nimport React, { useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  let customers = [[\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"], [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]], [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]]];\n  let questions = customers[0];\n  let numbers = [2624243872, 6309010523];\n\n  if (auth.user.stripeSubscriptionId) {\n    // Load questions and answers from DB api\n    customers = [[\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"], [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Yellow\"]]];\n    questions = customers[0]; // Create db function to get questions and not include phone\n\n    numbers = [2624243872]; // Create db function to get phone numbers by filters\n  }\n\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n\n  const onSubmit = data => {\n    console.log(data); // Show pending indicator\n\n    setPending(true); // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n\n    auth.updatePassword(data.pass).then(() => {\n      // Clear form\n      reset(); // Set success status\n\n      props.onStatus({\n        type: \"success\",\n        message: \"Your password has been updated\"\n      });\n    }) // Maybe also catch error for needing a subscription?\n    .catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        // Update state to show re-authentication modal\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit({\n            pass: data.pass\n          })\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, questions.map(question => /*#__PURE__*/React.createElement(CheckField, {\n    key: question,\n    id: 1,\n    name: question,\n    label: question + \" Answers\",\n    error: errors.question,\n    inputRef: register({\n      required: \"Please select one or all.\"\n    }),\n    options: [1, 2, 3],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FormField, {\n    name: \"message\",\n    type: \"textarea\",\n    label: \"Please enter your SMS\",\n    placeholder: \"Write to your people\",\n    error: errors.message,\n    inputRef: register({\n      required: \"Please enter your text message to send!\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: pending ? \"loading\" : \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\nexport default DashboardSms;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/components/DashboardSms.js"],"names":["React","useState","CheckField","FormField","SectionButton","useAuth","useForm","DashboardSms","props","auth","pending","setPending","customers","questions","numbers","user","stripeSubscriptionId","register","handleSubmit","errors","reset","getValues","onSubmit","data","console","log","updatePassword","pass","then","onStatus","type","message","catch","error","code","callback","finally","map","question","required","parentColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  let customers = [\n    [\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"],\n    [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]],\n    [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]],\n  ];\n  let questions = customers[0];\n  let numbers = [2624243872, 6309010523];\n\n  if (auth.user.stripeSubscriptionId) {\n    // Load questions and answers from DB api\n    customers = [\n      [\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"],\n      [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Yellow\"]],\n    ];\n    questions = customers[0]; // Create db function to get questions and not include phone\n    numbers = [2624243872]; // Create db function to get phone numbers by filters\n  }\n\n  const { register, handleSubmit, errors, reset, getValues } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n    // Show pending indicator\n    setPending(true);\n\n    // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      // Maybe also catch error for needing a subscription?\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Update state to show re-authentication modal\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit({ pass: data.pass }),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {questions.map((question) => (\n        <CheckField\n          key={question}\n          id={1}\n          name={question}\n          label={question + \" Answers\"}\n          error={errors.question}\n          inputRef={register({\n            required: \"Please select one or all.\",\n          })}\n          options={[1, 2, 3]}\n        />\n      ))}\n\n      <FormField\n        name=\"message\"\n        type=\"textarea\"\n        label=\"Please enter your SMS\"\n        placeholder=\"Write to your people\"\n        error={errors.message}\n        inputRef={register({\n          required: \"Please enter your text message to send!\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Send\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardSms;\n"]},"metadata":{},"sourceType":"module"}