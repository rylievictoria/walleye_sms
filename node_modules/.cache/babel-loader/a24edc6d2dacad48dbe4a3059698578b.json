{"ast":null,"code":"const _ = require('lodash');\n\nconst {\n  JWT\n} = require('google-auth-library');\n\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\n\nconst {\n  getFieldMask\n} = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets' // the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN'\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null; // create an axios instance with sheet root URL and interceptors to handle auth\n\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}`,\n\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n\n        _.keys(params).forEach(key => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], val => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n\n        return options ? options.slice(0, -1) : options;\n      }\n\n    }); // have to use bind here or the functions dont have access to `this` :(\n\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  } // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n\n\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  } // token must be created and managed (refreshed) elsewhere\n\n\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  } // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n\n\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  } // TODO: provide mechanism to share single JWT auth between docs?\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly'); // this seems to do the right thing and only renew the token if expired\n\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n\n    return config;\n  }\n\n  async _handleAxiosResponse(response) {\n    return response;\n  }\n\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n      const {\n        code,\n        message\n      } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{\n        [requestType]: requestParams\n      }],\n      includeSpreadsheetInResponse: true // responseRanges: [string]\n      // responseIncludeGridData: true\n\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n    _.each(response.data.updatedSpreadsheet.sheets, s => this._updateOrCreateSheet(s)); // console.log('API RESPONSE', response.data.replies[0][requestType]);\n\n\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...(responseRanges && {\n        responseIncludeGridData: true,\n        ...(responseRanges !== '*' && {\n          responseRanges\n        })\n      })\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n    _.each(response.data.updatedSpreadsheet.sheets, s => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `sheet.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) {\n    this._rawProperties = newProperties;\n  }\n\n  _updateOrCreateSheet({\n    properties,\n    data\n  }) {\n    const {\n      sheetId\n    } = properties;\n\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n        properties,\n        data\n      });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  } // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n\n\n  _getProp(param) {\n    this._ensureInfoLoaded();\n\n    return this._rawProperties[param];\n  }\n\n  _setProp(param, newVal) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() {\n    return this._getProp('title');\n  }\n\n  get locale() {\n    return this._getProp('locale');\n  }\n\n  get timeZone() {\n    return this._getProp('timeZone');\n  }\n\n  get autoRecalc() {\n    return this._getProp('autoRecalc');\n  }\n\n  get defaultFormat() {\n    return this._getProp('defaultFormat');\n  }\n\n  get spreadsheetTheme() {\n    return this._getProp('spreadsheetTheme');\n  }\n\n  get iterativeCalculationSettings() {\n    return this._getProp('iterativeCalculationSettings');\n  }\n\n  set title(newVal) {\n    this._setProp('title', newVal);\n  }\n\n  set locale(newVal) {\n    this._setProp('locale', newVal);\n  }\n\n  set timeZone(newVal) {\n    this._setProp('timeZone', newVal);\n  }\n\n  set autoRecalc(newVal) {\n    this._setProp('autoRecalc', newVal);\n  }\n\n  set defaultFormat(newVal) {\n    this._setProp('defaultFormat', newVal);\n  }\n\n  set spreadsheetTheme(newVal) {\n    this._setProp('spreadsheetTheme', newVal);\n  }\n\n  set iterativeCalculationSettings(newVal) {\n    this._setProp('iterativeCalculationSettings', newVal);\n  }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties)\n    });\n  } // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n\n\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: { ...(includeCells && {\n          includeGridData: true\n        })\n      }\n    });\n    this._rawProperties = response.data.properties;\n\n    _.each(response.data.sheets, s => this._updateOrCreateSheet(s));\n  }\n\n  async getInfo() {\n    return this.loadInfo();\n  } // alias to mimic old version\n\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  } // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n\n\n  get sheetCount() {\n    this._ensureInfoLoaded();\n\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues')\n    }); // _makeSingleUpdateRequest already adds the sheet\n\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId]; // allow it to work with `.headers` but `.headerValues` is the real prop\n\n    if (properties.headerValues || properties.headers) {\n      await newSheet.setHeaderRow(properties.headerValues || properties.headers);\n    }\n\n    return newSheet;\n  }\n\n  async addWorksheet(properties) {\n    return this.addSheet(properties);\n  } // alias to mimic old version\n\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', {\n      sheetId\n    });\n    delete this._rawSheets[sheetId];\n  } // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n\n\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', {\n      namedRangeId\n    });\n  } // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n\n\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n\n    const dataFilters = _.map(filtersArray, filter => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : {\n          a1Range: filter\n        };\n      }\n\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        } // TODO: make this support Developer Metadata filters\n\n\n        return {\n          gridRange: filter\n        };\n      }\n\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result; // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters\n        }\n      }); // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters\n      });\n    }\n\n    const {\n      sheets\n    } = result.data;\n\n    _.each(sheets, sheet => {\n      this._updateOrCreateSheet(sheet);\n    });\n  }\n\n}\n\nmodule.exports = GoogleSpreadsheet;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js"],"names":["_","require","JWT","Axios","GoogleSpreadsheetWorksheet","getFieldMask","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","GoogleSpreadsheet","constructor","sheetId","spreadsheetId","authMode","_rawSheets","_rawProperties","axios","create","baseURL","paramsSerializer","params","options","keys","forEach","key","isParamTypeObject","isParamTypeArray","length","encodeURIComponent","each","val","slice","interceptors","request","use","_setAxiosRequestAuth","bind","response","_handleAxiosResponse","_handleAxiosErrors","useApiKey","apiKey","useRawAccessToken","token","accessToken","useServiceAccountAuth","creds","impersonateAs","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","Error","headers","Authorization","credentials","access_token","error","data","code","message","get","_makeSingleUpdateRequest","requestType","requestParams","post","requests","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","properties","sheets","s","_updateOrCreateSheet","replies","_makeBatchUpdateRequest","responseRanges","responseIncludeGridData","_ensureInfoLoaded","newProperties","_fillCellData","_getProp","param","_setProp","newVal","title","locale","timeZone","autoRecalc","defaultFormat","spreadsheetTheme","iterativeCalculationSettings","updateProperties","fields","loadInfo","includeCells","includeGridData","getInfo","resetLocalCache","sheetCount","values","sheetsById","sheetsByIndex","sortBy","sheetsByTitle","keyBy","addSheet","omit","newSheetId","newSheet","headerValues","setHeaderRow","addWorksheet","deleteSheet","addNamedRange","name","range","namedRangeId","deleteNamedRange","loadCells","filters","readOnlyMode","filtersArray","isArray","dataFilters","map","filter","isString","a1Range","isObject","gridRange","result","ranges","sheet","module","exports"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,0BAA0B,GAAGH,OAAO,CAAC,8BAAD,CAA1C;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAmBJ,OAAO,CAAC,SAAD,CAAhC;;AAEA,MAAMK,kBAAkB,GAAG,CACzB,8CADyB,CAGzB;AACA;AACA;AACA;AACA;AACA;AARyB,CAA3B;AAWA,MAAMC,UAAU,GAAG;AACjBL,EAAAA,GAAG,EAAE,KADY;AAEjBM,EAAAA,OAAO,EAAE,SAFQ;AAGjBC,EAAAA,gBAAgB,EAAE;AAHD,CAAnB;;AAMA,MAAMC,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,aAAL,GAAqBD,OAArB;AACA,SAAKE,QAAL,GAAgB,IAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,cAAL,GAAsB,IAAtB,CAJmB,CAMnB;;AACA,SAAKC,KAAL,GAAad,KAAK,CAACe,MAAN,CAAa;AACxBC,MAAAA,OAAO,EAAG,iDAAgDP,OAAQ,EAD1C;;AAExB;AACA;AACAQ,MAAAA,gBAAgB,CAACC,MAAD,EAAS;AACvB,YAAIC,OAAO,GAAG,EAAd;;AACAtB,QAAAA,CAAC,CAACuB,IAAF,CAAOF,MAAP,EAAeG,OAAf,CAAwBC,GAAD,IAAS;AAC9B,gBAAMC,iBAAiB,GAAG,OAAOL,MAAM,CAACI,GAAD,CAAb,KAAuB,QAAjD;AACA,gBAAME,gBAAgB,GAAGD,iBAAiB,IAAKL,MAAM,CAACI,GAAD,CAAN,CAAYG,MAAZ,IAAsB,CAArE;AACA,cAAI,CAACF,iBAAL,EAAwBJ,OAAO,IAAK,GAAEG,GAAI,IAAGI,kBAAkB,CAACR,MAAM,CAACI,GAAD,CAAP,CAAc,GAArD;;AACxB,cAAIC,iBAAiB,IAAIC,gBAAzB,EAA2C;AACzC3B,YAAAA,CAAC,CAAC8B,IAAF,CAAOT,MAAM,CAACI,GAAD,CAAb,EAAqBM,GAAD,IAAS;AAC3BT,cAAAA,OAAO,IAAK,GAAEG,GAAI,IAAGI,kBAAkB,CAACE,GAAD,CAAM,GAA7C;AACD,aAFD;AAGD;AACF,SATD;;AAUA,eAAOT,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAH,GAA0BV,OAAxC;AACD;;AAjBuB,KAAb,CAAb,CAPmB,CA0BnB;;AACA,SAAKL,KAAL,CAAWgB,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoC,KAAKC,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAApC;AACA,SAAKpB,KAAL,CAAWgB,YAAX,CAAwBK,QAAxB,CAAiCH,GAAjC,CACE,KAAKI,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CADF,EAEE,KAAKG,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,CAFF;AAKA,WAAO,IAAP;AACD,GAnCqB,CAqCtB;;;AACA,QAAMI,SAAN,CAAgBhB,GAAhB,EAAqB;AACnB,SAAKX,QAAL,GAAgBP,UAAU,CAACC,OAA3B;AACA,SAAKkC,MAAL,GAAcjB,GAAd;AACD,GAzCqB,CA2CtB;;;AACA,QAAMkB,iBAAN,CAAwBC,KAAxB,EAA+B;AAC7B,SAAK9B,QAAL,GAAgBP,UAAU,CAACE,gBAA3B;AACA,SAAKoC,WAAL,GAAmBD,KAAnB;AACD,GA/CqB,CAiDtB;AACA;AACA;;;AACA,QAAME,qBAAN,CAA4BC,KAA5B,EAAmCC,aAAa,GAAG,IAAnD,EAAyD;AACvD,SAAKC,SAAL,GAAiB,IAAI/C,GAAJ,CAAQ;AACvBgD,MAAAA,KAAK,EAAEH,KAAK,CAACI,YADU;AAEvB1B,MAAAA,GAAG,EAAEsB,KAAK,CAACK,WAFY;AAGvBC,MAAAA,MAAM,EAAE/C,kBAHe;AAIvBgD,MAAAA,OAAO,EAAEN;AAJc,KAAR,CAAjB;AAMA,UAAM,KAAKO,YAAL,EAAN;AACD;;AAED,QAAMA,YAAN,GAAqB;AACnB,SAAKzC,QAAL,GAAgBP,UAAU,CAACL,GAA3B;AACA,UAAM,KAAK+C,SAAL,CAAeO,SAAf,EAAN;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GA3EqB,CA6EtB;AAEA;;;AACA,QAAMpB,oBAAN,CAA2BqB,MAA3B,EAAmC;AACjC;AACA,QAAI,KAAK3C,QAAL,KAAkBP,UAAU,CAACL,GAAjC,EAAsC;AACpC,UAAI,CAAC,KAAK+C,SAAV,EAAqB,MAAM,IAAIS,KAAJ,CAAU,iCAAV,CAAN,CADe,CAEpC;;AACA,YAAM,KAAKT,SAAL,CAAeO,SAAf,EAAN;AACAC,MAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAAgC,UAAS,KAAKX,SAAL,CAAeY,WAAf,CAA2BC,YAAa,EAAjF;AACD,KALD,MAKO,IAAI,KAAKhD,QAAL,KAAkBP,UAAU,CAACE,gBAAjC,EAAmD;AACxD,UAAI,CAAC,KAAKoC,WAAV,EAAuB,MAAM,IAAIa,KAAJ,CAAU,sBAAV,CAAN;AACvBD,MAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAAgC,UAAS,KAAKf,WAAY,EAA1D;AACD,KAHM,MAGA,IAAI,KAAK/B,QAAL,KAAkBP,UAAU,CAACC,OAAjC,EAA0C;AAC/C,UAAI,CAAC,KAAKkC,MAAV,EAAkB,MAAM,IAAIgB,KAAJ,CAAU,oBAAV,CAAN;AAClBD,MAAAA,MAAM,CAACpC,MAAP,GAAgBoC,MAAM,CAACpC,MAAP,IAAiB,EAAjC;AACAoC,MAAAA,MAAM,CAACpC,MAAP,CAAcI,GAAd,GAAoB,KAAKiB,MAAzB;AACD,KAJM,MAIA;AACL,YAAM,IAAIgB,KAAJ,CAAU,kEAAV,CAAN;AACD;;AACD,WAAOD,MAAP;AACD;;AAED,QAAMlB,oBAAN,CAA2BD,QAA3B,EAAqC;AAAE,WAAOA,QAAP;AAAkB;;AACzD,QAAME,kBAAN,CAAyBuB,KAAzB,EAAgC;AAC9B;AACA,QAAIA,KAAK,CAACzB,QAAN,IAAkByB,KAAK,CAACzB,QAAN,CAAe0B,IAArC,EAA2C;AACzC;AACA,UAAI,CAACD,KAAK,CAACzB,QAAN,CAAe0B,IAAf,CAAoBD,KAAzB,EAAgC,MAAMA,KAAN;AAEhC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoBH,KAAK,CAACzB,QAAN,CAAe0B,IAAf,CAAoBD,KAA9C;AACAA,MAAAA,KAAK,CAACG,OAAN,GAAiB,uBAAsBD,IAAK,KAAIC,OAAQ,EAAxD;AACA,YAAMH,KAAN;AACD;;AAED,QAAI/D,CAAC,CAACmE,GAAF,CAAMJ,KAAN,EAAa,iBAAb,MAAoC,GAAxC,EAA6C;AAC3C,UAAI,KAAKjD,QAAL,KAAkBP,UAAU,CAACC,OAAjC,EAA0C;AACxC,cAAM,IAAIkD,KAAJ,CAAU,wJAAV,CAAN;AACD;AACF;;AACD,UAAMK,KAAN;AACD;;AAED,QAAMK,wBAAN,CAA+BC,WAA/B,EAA4CC,aAA5C,EAA2D;AACzD,UAAMhC,QAAQ,GAAG,MAAM,KAAKrB,KAAL,CAAWsD,IAAX,CAAgB,cAAhB,EAAgC;AACrDC,MAAAA,QAAQ,EAAE,CAAC;AAAE,SAACH,WAAD,GAAeC;AAAjB,OAAD,CAD2C;AAErDG,MAAAA,4BAA4B,EAAE,IAFuB,CAGrD;AACA;;AAJqD,KAAhC,CAAvB;;AAOA,SAAKC,oBAAL,CAA0BpC,QAAQ,CAAC0B,IAAT,CAAcW,kBAAd,CAAiCC,UAA3D;;AACA5E,IAAAA,CAAC,CAAC8B,IAAF,CAAOQ,QAAQ,CAAC0B,IAAT,CAAcW,kBAAd,CAAiCE,MAAxC,EAAiDC,CAAD,IAAO,KAAKC,oBAAL,CAA0BD,CAA1B,CAAvD,EATyD,CAUzD;;;AACA,WAAOxC,QAAQ,CAAC0B,IAAT,CAAcgB,OAAd,CAAsB,CAAtB,EAAyBX,WAAzB,CAAP;AACD;;AAED,QAAMY,uBAAN,CAA8BT,QAA9B,EAAwCU,cAAxC,EAAwD;AACtD;AACA,UAAM5C,QAAQ,GAAG,MAAM,KAAKrB,KAAL,CAAWsD,IAAX,CAAgB,cAAhB,EAAgC;AACrDC,MAAAA,QADqD;AAErDC,MAAAA,4BAA4B,EAAE,IAFuB;AAGrD,UAAGS,cAAc,IAAI;AACnBC,QAAAA,uBAAuB,EAAE,IADN;AAEnB,YAAGD,cAAc,KAAK,GAAnB,IAA0B;AAAEA,UAAAA;AAAF,SAA7B;AAFmB,OAArB;AAHqD,KAAhC,CAAvB;;AASA,SAAKR,oBAAL,CAA0BpC,QAAQ,CAAC0B,IAAT,CAAcW,kBAAd,CAAiCC,UAA3D;;AACA5E,IAAAA,CAAC,CAAC8B,IAAF,CAAOQ,QAAQ,CAAC0B,IAAT,CAAcW,kBAAd,CAAiCE,MAAxC,EAAiDC,CAAD,IAAO,KAAKC,oBAAL,CAA0BD,CAA1B,CAAvD;AACD;;AAEDM,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKpE,cAAV,EAA0B,MAAM,IAAI0C,KAAJ,CAAU,iEAAV,CAAN;AAC3B;;AAEDgB,EAAAA,oBAAoB,CAACW,aAAD,EAAgB;AAAE,SAAKrE,cAAL,GAAsBqE,aAAtB;AAAsC;;AAE5EN,EAAAA,oBAAoB,CAAC;AAAEH,IAAAA,UAAF;AAAcZ,IAAAA;AAAd,GAAD,EAAuB;AACzC,UAAM;AAAEpD,MAAAA;AAAF,QAAcgE,UAApB;;AACA,QAAI,CAAC,KAAK7D,UAAL,CAAgBH,OAAhB,CAAL,EAA+B;AAC7B,WAAKG,UAAL,CAAgBH,OAAhB,IAA2B,IAAIR,0BAAJ,CAA+B,IAA/B,EAAqC;AAAEwE,QAAAA,UAAF;AAAcZ,QAAAA;AAAd,OAArC,CAA3B;AACD,KAFD,MAEO;AACL,WAAKjD,UAAL,CAAgBH,OAAhB,EAAyBI,cAAzB,GAA0C4D,UAA1C;;AACA,WAAK7D,UAAL,CAAgBH,OAAhB,EAAyB0E,aAAzB,CAAuCtB,IAAvC;AACD;AACF,GAnKqB,CAqKtB;;;AACAuB,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,SAAKJ,iBAAL;;AACA,WAAO,KAAKpE,cAAL,CAAoBwE,KAApB,CAAP;AACD;;AACDC,EAAAA,QAAQ,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAAE;AACxB,UAAM,IAAIhC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,MAAIiC,KAAJ,GAAY;AAAE,WAAO,KAAKJ,QAAL,CAAc,OAAd,CAAP;AAAgC;;AAC9C,MAAIK,MAAJ,GAAa;AAAE,WAAO,KAAKL,QAAL,CAAc,QAAd,CAAP;AAAiC;;AAChD,MAAIM,QAAJ,GAAe;AAAE,WAAO,KAAKN,QAAL,CAAc,UAAd,CAAP;AAAmC;;AACpD,MAAIO,UAAJ,GAAiB;AAAE,WAAO,KAAKP,QAAL,CAAc,YAAd,CAAP;AAAqC;;AACxD,MAAIQ,aAAJ,GAAoB;AAAE,WAAO,KAAKR,QAAL,CAAc,eAAd,CAAP;AAAwC;;AAC9D,MAAIS,gBAAJ,GAAuB;AAAE,WAAO,KAAKT,QAAL,CAAc,kBAAd,CAAP;AAA2C;;AACpE,MAAIU,4BAAJ,GAAmC;AAAE,WAAO,KAAKV,QAAL,CAAc,8BAAd,CAAP;AAAuD;;AAE5F,MAAII,KAAJ,CAAUD,MAAV,EAAkB;AAAE,SAAKD,QAAL,CAAc,OAAd,EAAuBC,MAAvB;AAAiC;;AACrD,MAAIE,MAAJ,CAAWF,MAAX,EAAmB;AAAE,SAAKD,QAAL,CAAc,QAAd,EAAwBC,MAAxB;AAAkC;;AACvD,MAAIG,QAAJ,CAAaH,MAAb,EAAqB;AAAE,SAAKD,QAAL,CAAc,UAAd,EAA0BC,MAA1B;AAAoC;;AAC3D,MAAII,UAAJ,CAAeJ,MAAf,EAAuB;AAAE,SAAKD,QAAL,CAAc,YAAd,EAA4BC,MAA5B;AAAsC;;AAC/D,MAAIK,aAAJ,CAAkBL,MAAlB,EAA0B;AAAE,SAAKD,QAAL,CAAc,eAAd,EAA+BC,MAA/B;AAAyC;;AACrE,MAAIM,gBAAJ,CAAqBN,MAArB,EAA6B;AAAE,SAAKD,QAAL,CAAc,kBAAd,EAAkCC,MAAlC;AAA4C;;AAC3E,MAAIO,4BAAJ,CAAiCP,MAAjC,EAAyC;AAAE,SAAKD,QAAL,CAAc,8BAAd,EAA8CC,MAA9C;AAAwD;;AAEnG,QAAMQ,gBAAN,CAAuBtB,UAAvB,EAAmC;AACjC;AACA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AAEI,UAAM,KAAKR,wBAAL,CAA8B,6BAA9B,EAA6D;AACjEQ,MAAAA,UADiE;AAEjEuB,MAAAA,MAAM,EAAE9F,YAAY,CAACuE,UAAD;AAF6C,KAA7D,CAAN;AAID,GA9MqB,CAgNtB;;;AACA,QAAMwB,QAAN,CAAeC,YAAf,EAA6B;AAC3B,UAAM/D,QAAQ,GAAG,MAAM,KAAKrB,KAAL,CAAWkD,GAAX,CAAe,GAAf,EAAoB;AACzC9C,MAAAA,MAAM,EAAE,EACN,IAAGgF,YAAY,IAAI;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SAAnB;AADM;AADiC,KAApB,CAAvB;AAKA,SAAKtF,cAAL,GAAsBsB,QAAQ,CAAC0B,IAAT,CAAcY,UAApC;;AACA5E,IAAAA,CAAC,CAAC8B,IAAF,CAAOQ,QAAQ,CAAC0B,IAAT,CAAca,MAArB,EAA8BC,CAAD,IAAO,KAAKC,oBAAL,CAA0BD,CAA1B,CAApC;AACD;;AACD,QAAMyB,OAAN,GAAgB;AAAE,WAAO,KAAKH,QAAL,EAAP;AAAyB,GA1NrB,CA0NsB;;;AAE5CI,EAAAA,eAAe,GAAG;AAChB,SAAKxF,cAAL,GAAsB,IAAtB;AACA,SAAKD,UAAL,GAAkB,EAAlB;AACD,GA/NqB,CAiOtB;;;AACA,MAAI0F,UAAJ,GAAiB;AACf,SAAKrB,iBAAL;;AACA,WAAOpF,CAAC,CAAC0G,MAAF,CAAS,KAAK3F,UAAd,EAA0Ba,MAAjC;AACD;;AAED,MAAI+E,UAAJ,GAAiB;AACf,SAAKvB,iBAAL;;AACA,WAAO,KAAKrE,UAAZ;AACD;;AAED,MAAI6F,aAAJ,GAAoB;AAClB,SAAKxB,iBAAL;;AACA,WAAOpF,CAAC,CAAC6G,MAAF,CAAS,KAAK9F,UAAd,EAA0B,OAA1B,CAAP;AACD;;AAED,MAAI+F,aAAJ,GAAoB;AAClB,SAAK1B,iBAAL;;AACA,WAAOpF,CAAC,CAAC+G,KAAF,CAAQ,KAAKhG,UAAb,EAAyB,OAAzB,CAAP;AACD;;AAED,QAAMiG,QAAN,CAAepC,UAAU,GAAG,EAA5B,EAAgC;AAC9B;AACA;AAEA,UAAMtC,QAAQ,GAAG,MAAM,KAAK8B,wBAAL,CAA8B,UAA9B,EAA0C;AAC/DQ,MAAAA,UAAU,EAAE5E,CAAC,CAACiH,IAAF,CAAOrC,UAAP,EAAmB,SAAnB,EAA8B,cAA9B;AADmD,KAA1C,CAAvB,CAJ8B,CAO9B;;AACA,UAAMsC,UAAU,GAAG5E,QAAQ,CAACsC,UAAT,CAAoBhE,OAAvC;AACA,UAAMuG,QAAQ,GAAG,KAAKR,UAAL,CAAgBO,UAAhB,CAAjB,CAT8B,CAW9B;;AACA,QAAItC,UAAU,CAACwC,YAAX,IAA2BxC,UAAU,CAACjB,OAA1C,EAAmD;AACjD,YAAMwD,QAAQ,CAACE,YAAT,CAAsBzC,UAAU,CAACwC,YAAX,IAA2BxC,UAAU,CAACjB,OAA5D,CAAN;AACD;;AAED,WAAOwD,QAAP;AACD;;AACD,QAAMG,YAAN,CAAmB1C,UAAnB,EAA+B;AAAE,WAAO,KAAKoC,QAAL,CAAcpC,UAAd,CAAP;AAAmC,GAxQ9C,CAwQ+C;;;AAErE,QAAM2C,WAAN,CAAkB3G,OAAlB,EAA2B;AACzB;AACA;AACA,UAAM,KAAKwD,wBAAL,CAA8B,aAA9B,EAA6C;AAAExD,MAAAA;AAAF,KAA7C,CAAN;AACA,WAAO,KAAKG,UAAL,CAAgBH,OAAhB,CAAP;AACD,GA/QqB,CAiRtB;;;AACA,QAAM4G,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,YAAjC,EAA+C;AAC7C;AACA,WAAO,KAAKvD,wBAAL,CAA8B,eAA9B,EAA+C;AACpDqD,MAAAA,IADoD;AAEpDC,MAAAA,KAFoD;AAGpDC,MAAAA;AAHoD,KAA/C,CAAP;AAKD;;AAED,QAAMC,gBAAN,CAAuBD,YAAvB,EAAqC;AACnC,WAAO,KAAKvD,wBAAL,CAA8B,kBAA9B,EAAkD;AAAEuD,MAAAA;AAAF,KAAlD,CAAP;AACD,GA7RqB,CA+RtB;;;AACA,QAAME,SAAN,CAAgBC,OAAhB,EAAyB;AACvB;AACA;AACA;AACA;AAEA;AACA,UAAMC,YAAY,GAAG,KAAKjH,QAAL,KAAkBP,UAAU,CAACC,OAAlD;AAEA,UAAMwH,YAAY,GAAGhI,CAAC,CAACiI,OAAF,CAAUH,OAAV,IAAqBA,OAArB,GAA+B,CAACA,OAAD,CAApD;;AACA,UAAMI,WAAW,GAAGlI,CAAC,CAACmI,GAAF,CAAMH,YAAN,EAAqBI,MAAD,IAAY;AAClD,UAAIpI,CAAC,CAACqI,QAAF,CAAWD,MAAX,CAAJ,EAAwB;AACtB,eAAOL,YAAY,GAAGK,MAAH,GAAY;AAAEE,UAAAA,OAAO,EAAEF;AAAX,SAA/B;AACD;;AACD,UAAIpI,CAAC,CAACuI,QAAF,CAAWH,MAAX,CAAJ,EAAwB;AACtB,YAAIL,YAAJ,EAAkB;AAChB,gBAAM,IAAIrE,KAAJ,CAAU,gGAAV,CAAN;AACD,SAHqB,CAItB;;;AACA,eAAO;AAAE8E,UAAAA,SAAS,EAAEJ;AAAb,SAAP;AACD;;AACD,YAAM,IAAI1E,KAAJ,CAAU,8DAAV,CAAN;AACD,KAZmB,CAApB;;AAcA,QAAI+E,MAAJ,CAxBuB,CAyBvB;AACA;;AACA,QAAI,KAAK3H,QAAL,KAAkBP,UAAU,CAACC,OAAjC,EAA0C;AACxCiI,MAAAA,MAAM,GAAG,MAAM,KAAKxH,KAAL,CAAWkD,GAAX,CAAe,GAAf,EAAoB;AACjC9C,QAAAA,MAAM,EAAE;AACNiF,UAAAA,eAAe,EAAE,IADX;AAENoC,UAAAA,MAAM,EAAER;AAFF;AADyB,OAApB,CAAf,CADwC,CAO1C;AACC,KARD,MAQO;AACLO,MAAAA,MAAM,GAAG,MAAM,KAAKxH,KAAL,CAAWsD,IAAX,CAAgB,kBAAhB,EAAoC;AACjD+B,QAAAA,eAAe,EAAE,IADgC;AAEjD4B,QAAAA;AAFiD,OAApC,CAAf;AAID;;AAED,UAAM;AAAErD,MAAAA;AAAF,QAAa4D,MAAM,CAACzE,IAA1B;;AACAhE,IAAAA,CAAC,CAAC8B,IAAF,CAAO+C,MAAP,EAAgB8D,KAAD,IAAW;AAAE,WAAK5D,oBAAL,CAA0B4D,KAA1B;AAAmC,KAA/D;AACD;;AA5UqB;;AA+UxBC,MAAM,CAACC,OAAP,GAAiBnI,iBAAjB","sourcesContent":["const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `sheet.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    if (properties.headerValues || properties.headers) {\n      await newSheet.setHeaderRow(properties.headerValues || properties.headers);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n"]},"metadata":{},"sourceType":"script"}