{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/components/DashboardHome.js\";\nimport React, { useState } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction DashboardHome(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    // Show pending indicator\n    setPending(true); // Need to verify URL is valid\n    // Need to verify phone column is in sheet once URL is valid\n\n    return auth.updateProfile(data).then(() => {\n      // Set success status\n      props.onStatus({\n        type: \"success\",\n        message: \"Your form settings have been updated.\"\n      });\n    }).catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit(data)\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"sheetLink\",\n    type: \"text\",\n    label: \"Copy & paste the URL to the Google sheet where your form responses go:\",\n    defaultValue: auth.user.sheetLink,\n    placeholder: \"https://docs.google.com/spreadsheets/...\",\n    error: errors.sheetLink,\n    inputRef: register({\n      required: \"Please enter a valid sheet URL.\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormField, {\n    name: \"phoneCol\",\n    type: \"text\",\n    label: \"Copy the title of the column where all of the phone numbers are:\",\n    defaultValue: auth.user.phoneCol,\n    placeholder: \"What is your phone #?\",\n    error: errors.phoneCol,\n    inputRef: register({\n      required: \"Please enter a valid column title within your sheet. They must be in the top row.\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: pending ? \"loading\" : \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n}\n\nexport default DashboardHome;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/components/DashboardHome.js"],"names":["React","useState","FormField","SectionButton","useAuth","useForm","DashboardHome","props","auth","pending","setPending","register","handleSubmit","errors","onSubmit","data","updateProfile","then","onStatus","type","message","catch","error","code","callback","finally","user","sheetLink","required","phoneCol","parentColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction DashboardHome(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = (data) => {\n    // Show pending indicator\n    setPending(true);\n\n    // Need to verify URL is valid\n    // Need to verify phone column is in sheet once URL is valid\n\n    return auth\n      .updateProfile(data)\n      .then(() => {\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your form settings have been updated.\",\n        });\n      })\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit(data),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormField\n        name=\"sheetLink\"\n        type=\"text\"\n        label=\"Copy & paste the URL to the Google sheet where your form responses go:\"\n        defaultValue={auth.user.sheetLink}\n        placeholder=\"https://docs.google.com/spreadsheets/...\"\n        error={errors.sheetLink}\n        inputRef={register({\n          required: \"Please enter a valid sheet URL.\",\n        })}\n      />\n      <FormField\n        name=\"phoneCol\"\n        type=\"text\"\n        label=\"Copy the title of the column where all of the phone numbers are:\"\n        defaultValue={auth.user.phoneCol}\n        placeholder=\"What is your phone #?\"\n        error={errors.phoneCol}\n        inputRef={register({\n          required:\n            \"Please enter a valid column title within your sheet. They must be in the top row.\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Save\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardHome;\n"]},"metadata":{},"sourceType":"module"}