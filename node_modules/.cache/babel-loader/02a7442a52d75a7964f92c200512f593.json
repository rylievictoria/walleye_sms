{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\nexport function filterNumbers(data, customers, phoneCol) {\n  let numbers = []; // Asks if customer has all filters\n\n  Object.keys(data).forEach(d => {\n    const [q, value] = d.split('|||');\n\n    if (data[d] && d !== \"message\") {\n      console.log(q);\n      console.log(customers);\n      console.log(customers[q]);\n\n      for (let i = 0; i < customers[q].responses.length; i++) {\n        if (customers[q].responses[i] === value) {\n          numbers.push(customers[phoneCol].options[i]);\n        } else if (customers[q].responses[i].indexOf(value) >= 0) {\n          numbers.push(customers[phoneCol].options[i]);\n        } // Uncomment to remove number of customer if value is not included in filter\n        // else if (numbers.indexOf(customers[phoneCol].options[i]) >= 0) {\n        //     numbers.remote(customers[phoneCol].options[i]);\n        // }\n\n      }\n    }\n  });\n  numbers = [...new Set(numbers)];\n  return numbers;\n}\nexport function formatResponses(questions, responses) {\n  let obj = {};\n\n  for (let i = 0; i < questions.length; i++) {\n    let q = questions[i];\n    let all = [];\n    let a = responses.map(r => {\n      if (r[i] && r[i].trim()) {\n        all.push(...r[i].split(','));\n      }\n\n      return r[i];\n    });\n    all = [...new Set(all)];\n\n    if (all.length > 0) {\n      obj[q] = {\n        responses: a,\n        options: all\n      };\n    }\n  }\n\n  return obj;\n} // Fetch a Google Sheet\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    let sheet = doc.sheetsById[pageID];\n    let rows = await sheet.getRows();\n    let responses = rows.map(r => r._rawData);\n    await sheet.loadHeaderRow();\n    let questions = sheet.headerValues;\n    return formatResponses(questions, responses);\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","filterNumbers","data","customers","phoneCol","numbers","Object","keys","forEach","d","q","value","split","console","log","i","responses","length","push","options","indexOf","Set","formatResponses","questions","obj","all","a","map","r","trim","getResponses","sheetLink","sheetID","slice","lastIndexOf","pageID","doc","useApiKey","process","env","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","rows","getRows","_rawData","loadHeaderRow","headerValues","e","error"],"mappings":"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","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nexport function filterNumbers(data, customers, phoneCol) {\n    let numbers = [];\n    // Asks if customer has all filters\n    Object.keys(data).forEach((d) => {\n        const [q, value] = d.split('|||');\n        if (data[d] && d !== \"message\") {\n            console.log(q);\n            console.log(customers);\n            console.log(customers[q]);\n            for(let i=0; i<customers[q].responses.length; i++) {\n                if (customers[q].responses[i] === value) {\n                    numbers.push(customers[phoneCol].options[i]);\n                } else if (customers[q].responses[i].indexOf(value) >= 0) {\n                    numbers.push(customers[phoneCol].options[i]);\n                }\n                // Uncomment to remove number of customer if value is not included in filter\n                // else if (numbers.indexOf(customers[phoneCol].options[i]) >= 0) {\n                //     numbers.remote(customers[phoneCol].options[i]);\n                // }\n            }\n        }\n    });\n    numbers = [...new Set(numbers)];\n    return numbers;\n}\n\nexport function formatResponses(questions, responses) {\n    let obj = {};\n    for (let i = 0; i < questions.length; i++) {\n        let q = questions[i];\n        let all = [];\n        let a = responses.map((r) => {\n            if (r[i] && r[i].trim()) {\n                all.push(...r[i].split(','));\n            }\n            return r[i];\n        });\n        all = [...new Set(all)];\n        if (all.length > 0) {\n            obj[q] = {\n                responses: a,\n                options: all\n            };\n        }\n    }\n    return obj;\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        let sheet = doc.sheetsById[pageID];\n        let rows = await sheet.getRows();\n        let responses = rows.map(r => r._rawData);\n        await sheet.loadHeaderRow();\n        let questions = sheet.headerValues;\n        return formatResponses(questions, responses);\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}