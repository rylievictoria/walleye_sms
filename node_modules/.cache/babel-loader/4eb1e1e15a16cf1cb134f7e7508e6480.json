{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/components/DashboardSms.js\";\nimport React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\nimport { getResponses } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [responses, setResponses] = useState([[\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]], [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]]]);\n  const [questions, setQuestions] = useState([\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"]);\n  const [formAlert, setFormAlert] = useState(null);\n  let res = getResponses(auth.user.sheetLink);\n  useEffect(() => {\n    if (auth.user.planIsActive && auth.user.sheetLink) {\n      setPending(true);\n      getResponses(auth.user.sheetLink).then(resp => {\n        setResponses(resp.customers);\n        setQuestions(resp.questions);\n        setPending(false);\n      }).catch(e => {\n        console.error('Error: ', e);\n        setPending(false);\n      });\n    } else {\n      // Alert that no subscription and should sign up\n      console.log(auth.user);\n    }\n  }, [auth.user]);\n  console.log(questions);\n  let numbers = [2624243872, 6309010523];\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    console.log(data); // Show pending indicator\n\n    setPending(true); // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n\n    auth.updatePassword(data.pass).then(() => {\n      // Clear form\n      reset(); // Set success status\n\n      props.onStatus({\n        type: \"success\",\n        message: \"Your password has been updated\"\n      });\n    }) // Maybe also catch error for needing a subscription?\n    .catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        // Update state to show re-authentication modal\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit({\n            pass: data.pass\n          })\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, !pending && questions.map(question => /*#__PURE__*/React.createElement(FormField, {\n    key: question,\n    name: question,\n    type: \"checkbox\",\n    label: \"Check me\",\n    error: errors.question,\n    inputRef: register({\n      required: \"Please answer this question.\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(FormField, {\n    name: \"message\",\n    type: \"textarea\",\n    label: \"Please enter your SMS\",\n    placeholder: \"Write to your people\",\n    error: errors.message,\n    inputRef: register({\n      required: \"Please enter your text message to send!\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: pending ? \"loading\" : \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\nexport default DashboardSms;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/components/DashboardSms.js"],"names":["React","useState","useEffect","FormField","SectionButton","useAuth","useForm","getResponses","redirectToCheckout","DashboardSms","props","auth","pending","setPending","responses","setResponses","questions","setQuestions","formAlert","setFormAlert","res","user","sheetLink","planIsActive","then","resp","customers","catch","e","console","error","log","numbers","register","handleSubmit","errors","reset","onSubmit","data","updatePassword","pass","onStatus","type","message","code","callback","finally","map","question","required","parentColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\nimport { getResponses } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [responses, setResponses] = useState([\n      [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]],\n      [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]],\n  ]);\n  const [questions, setQuestions] = useState([\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"]);\n  const [formAlert, setFormAlert] = useState(null);\n\n  let res = getResponses(auth.user.sheetLink);\n\n  useEffect(() => {\n      if (auth.user.planIsActive && auth.user.sheetLink) {\n        setPending(true);\n        getResponses(auth.user.sheetLink)\n        .then((resp) => {\n          setResponses(resp.customers);\n          setQuestions(resp.questions);\n          setPending(false);\n        })\n        .catch((e) => {\n          console.error('Error: ', e);\n          setPending(false);\n        });\n      }\n      else {\n        // Alert that no subscription and should sign up\n        console.log(auth.user);\n      }\n    }, [auth.user]);\n\n  console.log(questions);\n  \n  let numbers = [2624243872, 6309010523];\n\n  const { register, handleSubmit, errors, reset } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n    // Show pending indicator\n    setPending(true);\n\n    // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      // Maybe also catch error for needing a subscription?\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Update state to show re-authentication modal\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit({ pass: data.pass }),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {!pending && questions.map((question) => (\n          <FormField\n          key={question}\n          name={question}\n          type=\"checkbox\"\n          label=\"Check me\"\n          error={errors.question}\n          inputRef={register({\n            required:\n              \"Please answer this question.\",\n          })}\n        />\n      )\n      )}\n\n      <FormField\n        name=\"message\"\n        type=\"textarea\"\n        label=\"Please enter your SMS\"\n        placeholder=\"Write to your people\"\n        error={errors.message}\n        inputRef={register({\n          required: \"Please enter your text message to send!\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Send\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardSms;\n"]},"metadata":{},"sourceType":"module"}