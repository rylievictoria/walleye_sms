{"ast":null,"code":"var _jsxFileName = \"/Users/rhendren/walleye_sms/src/components/DashboardSms.js\";\nimport React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport SectionHeader from \"./SectionHeader\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\nimport { getResponses } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [phoneCol, setPhoneCol] = useState(\"Number\");\n  const [customers, setCustomers] = useState({\n    \"Name\": {\n      responses: [\"Rylie\", \"Jordan\"],\n      options: [\"Rylie\", \"Jordan\"]\n    },\n    \"Number\": {\n      responses: [2624243872, 6309010523],\n      options: [2624243872, 6309010523]\n    },\n    \"Pizza Topping\": {\n      responses: [\"Pepperoni\", [\"Cheese\", \"Sausage\"]],\n      options: [\"Pepperoni\", \"Cheese\", \"Sausage\"]\n    },\n    \"Favorite Color\": {\n      responses: [[\"Red\", \"Blue\"], \"Green\"],\n      options: [\"Red\", \"Blue\", \"Green\"]\n    }\n  });\n  const [formAlert, setFormAlert] = useState(null);\n  useEffect(() => {\n    if (auth.user.planIsActive && auth.user.sheetLink && auth.user.phoneCol) {\n      setPending(true);\n      getResponses(auth.user.sheetLink).then(c => {\n        setCustomers(c);\n        setPhoneCol(auth.user.phoneCol);\n      }).catch(e => {\n        console.error('Error: ', e);\n      });\n      setPending(false);\n    } else {\n      // Alert that no subscription and should sign up\n      // Redirect to checkout?\n      console.log(auth.user);\n    }\n  }, [auth.user]);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    const message = data.message;\n    let filters = Object.entries(data).filter(([key, value]) => value);\n    let customFilters = {};\n    filters.forEach(f => {\n      const [question, value] = f[0].split('|||');\n      console.log(question);\n      console.log(value);\n\n      if (customFilters[question]) {\n        customFilters[question].append(value);\n      } else {\n        customFilters[question] = [value];\n      }\n    });\n    console.log(message);\n    console.log(customFilters); // Show pending indicator\n\n    setPending(true); // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n\n    auth.updatePassword(data.pass).then(() => {\n      // Clear form\n      reset(); // Set success status\n\n      props.onStatus({\n        type: \"success\",\n        message: \"Your password has been updated\"\n      });\n    }) // Maybe also catch error for needing a subscription?\n    .catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        // Update state to show re-authentication modal\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit({\n            pass: data.pass\n          })\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, !pending && Object.entries(customers).map(([q, values]) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"is-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, q), values.options.map(a => /*#__PURE__*/React.createElement(FormField, {\n    id: a,\n    name: q + \"|||\" + a,\n    type: \"checkbox\",\n    inputRef: register(),\n    error: errors.q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(FormField, {\n    name: \"message\",\n    type: \"textarea\",\n    label: \"Please enter your SMS\",\n    placeholder: \"Write to your people\",\n    error: errors.message,\n    inputRef: register({\n      required: \"Please enter your text message to send!\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: pending ? \"loading\" : \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\nexport default DashboardSms;","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/components/DashboardSms.js"],"names":["React","useState","useEffect","FormField","SectionButton","SectionHeader","useAuth","useForm","getResponses","redirectToCheckout","DashboardSms","props","auth","pending","setPending","phoneCol","setPhoneCol","customers","setCustomers","responses","options","formAlert","setFormAlert","user","planIsActive","sheetLink","then","c","catch","e","console","error","log","register","handleSubmit","errors","reset","onSubmit","data","message","filters","Object","entries","filter","key","value","customFilters","forEach","f","question","split","append","updatePassword","pass","onStatus","type","code","callback","finally","map","q","values","a","required","parentColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,kBAAT,QAAmC,qBAAnC;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,IAAI,GAAGN,OAAO,EAApB;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,QAAD,CAAxC;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC;AACzC,YAAQ;AAACkB,MAAAA,SAAS,EAAE,CAAC,OAAD,EAAU,QAAV,CAAZ;AAAiCC,MAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV;AAA1C,KADiC;AAEzC,cAAU;AAACD,MAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,UAAb,CAAZ;AAAsCC,MAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb;AAA/C,KAF+B;AAGzC,qBAAiB;AAACD,MAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,CAAC,QAAD,EAAW,SAAX,CAAd,CAAZ;AAAkDC,MAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,QAAd,EAAwB,SAAxB;AAA3D,KAHwB;AAIzC,sBAAkB;AAACD,MAAAA,SAAS,EAAE,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD,EAAkB,OAAlB,CAAZ;AAAwCC,MAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB;AAAjD;AAJuB,GAAD,CAA1C;AAMA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,IAAI,CAACW,IAAL,CAAUC,YAAV,IAA0BZ,IAAI,CAACW,IAAL,CAAUE,SAApC,IAAiDb,IAAI,CAACW,IAAL,CAAUR,QAA/D,EAAyE;AACvED,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,MAAAA,YAAY,CAACI,IAAI,CAACW,IAAL,CAAUE,SAAX,CAAZ,CACCC,IADD,CACOC,CAAD,IAAO;AACXT,QAAAA,YAAY,CAACS,CAAD,CAAZ;AACAX,QAAAA,WAAW,CAACJ,IAAI,CAACW,IAAL,CAAUR,QAAX,CAAX;AACD,OAJD,EAKCa,KALD,CAKQC,CAAD,IAAO;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACD,OAPD;AAQAf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD,MAYK;AACH;AACA;AACAgB,MAAAA,OAAO,CAACE,GAAR,CAAYpB,IAAI,CAACW,IAAjB;AACD;AACF,GAlBM,EAkBJ,CAACX,IAAI,CAACW,IAAN,CAlBI,CAAT;AAoBA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA4C7B,OAAO,EAAzD;;AAEA,QAAM8B,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAMC,OAAO,GAAGD,IAAI,CAACC,OAArB;AACA,QAAIC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeJ,IAAf,EAAqBK,MAArB,CAA4B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkBA,KAA9C,CAAd;AACA,QAAIC,aAAa,GAAG,EAApB;AACAN,IAAAA,OAAO,CAACO,OAAR,CAAiBC,CAAD,IAAO;AACrB,YAAM,CAACC,QAAD,EAAWJ,KAAX,IAAoBG,CAAC,CAAC,CAAD,CAAD,CAAKE,KAAL,CAAW,KAAX,CAA1B;AACApB,MAAAA,OAAO,CAACE,GAAR,CAAYiB,QAAZ;AACAnB,MAAAA,OAAO,CAACE,GAAR,CAAYa,KAAZ;;AACA,UAAIC,aAAa,CAACG,QAAD,CAAjB,EAA6B;AAC3BH,QAAAA,aAAa,CAACG,QAAD,CAAb,CAAwBE,MAAxB,CAA+BN,KAA/B;AACD,OAFD,MAEO;AACLC,QAAAA,aAAa,CAACG,QAAD,CAAb,GAA0B,CAACJ,KAAD,CAA1B;AACD;AACF,KATD;AAUAf,IAAAA,OAAO,CAACE,GAAR,CAAYO,OAAZ;AACAT,IAAAA,OAAO,CAACE,GAAR,CAAYc,aAAZ,EAfyB,CAgBzB;;AACAhC,IAAAA,UAAU,CAAC,IAAD,CAAV,CAjByB,CAmBzB;AACA;AACA;AACA;AACA;;AACAF,IAAAA,IAAI,CACDwC,cADH,CACkBd,IAAI,CAACe,IADvB,EAEG3B,IAFH,CAEQ,MAAM;AACV;AACAU,MAAAA,KAAK,GAFK,CAGV;;AACAzB,MAAAA,KAAK,CAAC2C,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAE,SADO;AAEbhB,QAAAA,OAAO,EAAE;AAFI,OAAf;AAID,KAVH,EAWE;AAXF,KAYGX,KAZH,CAYUG,KAAD,IAAW;AAChB,UAAIA,KAAK,CAACyB,IAAN,KAAe,4BAAnB,EAAiD;AAC/C;AACA7C,QAAAA,KAAK,CAAC2C,QAAN,CAAe;AACbC,UAAAA,IAAI,EAAE,uBADO;AAEb;AACAE,UAAAA,QAAQ,EAAE,MAAMpB,QAAQ,CAAC;AAAEgB,YAAAA,IAAI,EAAEf,IAAI,CAACe;AAAb,WAAD;AAHX,SAAf;AAKD,OAPD,MAOO;AACL;AACA1C,QAAAA,KAAK,CAAC2C,QAAN,CAAe;AACbC,UAAAA,IAAI,EAAE,OADO;AAEbhB,UAAAA,OAAO,EAAER,KAAK,CAACQ;AAFF,SAAf;AAID;AACF,KA3BH,EA4BGmB,OA5BH,CA4BW,MAAM;AACb;AACA5C,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KA/BH;AAgCD,GAxDD;;AA0DA,sBACE;AAAM,IAAA,QAAQ,EAAEoB,YAAY,CAACG,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACxB,OAAD,IAAY4B,MAAM,CAACC,OAAP,CAAezB,SAAf,EAA0B0C,GAA1B,CAA8B,CAAC,CAACC,CAAD,EAAIC,MAAJ,CAAD,kBACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BD,CAA5B,CADJ,EAEKC,MAAM,CAACzC,OAAP,CAAeuC,GAAf,CAAoBG,CAAD,iBAChB,oBAAC,SAAD;AACI,IAAA,EAAE,EAAEA,CADR;AAEI,IAAA,IAAI,EAAEF,CAAC,GAAC,KAAF,GAAQE,CAFlB;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,QAAQ,EAAE7B,QAAQ,EAJtB;AAKI,IAAA,KAAK,EAAEE,MAAM,CAACyB,CALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAFL,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADS,CADf,eAiBE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAC,uBAHR;AAIE,IAAA,WAAW,EAAC,sBAJd;AAKE,IAAA,KAAK,EAAEzB,MAAM,CAACI,OALhB;AAME,IAAA,QAAQ,EAAEN,QAAQ,CAAC;AACjB8B,MAAAA,QAAQ,EAAE;AADO,KAAD,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,eA2BE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,WAAW,EAAEpD,KAAK,CAACqD,WADrB;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAEnD,OAAO,GAAG,SAAH,GAAe,QAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF,CA3BF,CADF;AAyCD;;AAED,eAAeH,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport SectionHeader from \"./SectionHeader\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\nimport { getResponses } from \"./../util/sheets.js\";\nimport { redirectToCheckout } from \"./../util/stripe.js\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [phoneCol, setPhoneCol] = useState(\"Number\");\n  const [customers, setCustomers] = useState({\n    \"Name\": {responses: [\"Rylie\", \"Jordan\"], options: [\"Rylie\", \"Jordan\"]},\n    \"Number\": {responses: [2624243872, 6309010523], options: [2624243872, 6309010523]},\n    \"Pizza Topping\": {responses: [\"Pepperoni\", [\"Cheese\", \"Sausage\"]], options: [\"Pepperoni\", \"Cheese\", \"Sausage\"]},\n    \"Favorite Color\": {responses: [[\"Red\", \"Blue\"], \"Green\"], options: [\"Red\", \"Blue\", \"Green\"]}\n  });\n  const [formAlert, setFormAlert] = useState(null);\n\n  useEffect(() => {\n      if (auth.user.planIsActive && auth.user.sheetLink && auth.user.phoneCol) {\n        setPending(true);\n        getResponses(auth.user.sheetLink)\n        .then((c) => {\n          setCustomers(c);\n          setPhoneCol(auth.user.phoneCol);\n        })\n        .catch((e) => {\n          console.error('Error: ', e);\n        });\n        setPending(false);\n      }\n      else {\n        // Alert that no subscription and should sign up\n        // Redirect to checkout?\n        console.log(auth.user);\n      }\n    }, [auth.user]);\n\n  const { register, handleSubmit, errors, reset } = useForm();\n\n  const onSubmit = (data) => {\n    const message = data.message;\n    let filters = Object.entries(data).filter(([key, value]) => value);\n    let customFilters = {};\n    filters.forEach((f) => {\n      const [question, value] = f[0].split('|||');\n      console.log(question);\n      console.log(value);\n      if (customFilters[question]) {\n        customFilters[question].append(value);\n      } else {\n        customFilters[question] = [value];\n      }\n    });\n    console.log(message);\n    console.log(customFilters);\n    // Show pending indicator\n    setPending(true);\n\n    // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      // Maybe also catch error for needing a subscription?\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Update state to show re-authentication modal\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit({ pass: data.pass }),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {!pending && Object.entries(customers).map(([q, values]) => (\n          <div>\n              <h3 className=\"is-primary\">{q}</h3>\n              {values.options.map((a) => (\n                  <FormField\n                      id={a}\n                      name={q+\"|||\"+a}\n                      type=\"checkbox\"\n                      inputRef={register()}\n                      error={errors.q}\n                  />)\n              )}\n              <br />\n          </div>\n        )\n      )}\n      <FormField\n        name=\"message\"\n        type=\"textarea\"\n        label=\"Please enter your SMS\"\n        placeholder=\"Write to your people\"\n        error={errors.message}\n        inputRef={register({\n          required: \"Please enter your text message to send!\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Send\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardSms;\n"]},"metadata":{},"sourceType":"module"}