{"ast":null,"code":"import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nasync function getSheet(sheetID, pageID) {\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n  const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n  const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    const sheet = doc.sheetsById[pageID];\n    return sheet;\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n} // Fetch a Google Sheet\n\n\nexport async function getResponses(sheetLink) {\n  const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n  const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n  const doc = new GoogleSpreadsheet(sheetID, pageID);\n  const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n  const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n  try {\n    await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n    await doc.loadInfo();\n    const sheet = doc.sheetsById[pageID];\n    const rows = await sheet.getRows();\n    console.log(rows.length);\n    rows.map(r => {\n      console.log(r._rawData);\n    });\n    console.log(sheet.cellStats);\n    return sheet;\n  } catch (e) {\n    console.error('Error: ', e);\n  }\n}","map":{"version":3,"sources":["/Users/rhendren/walleye_sms/src/util/sheets.js"],"names":["GoogleSpreadsheet","getSheet","sheetID","pageID","doc","client_email","process","env","REACT_APP_SHEETS_CLIENT_EMAIL","private_key","REACT_APP_SHEETS_PRIVATE_KEY","useApiKey","REACT_APP_SHEETS_API_KEY","loadInfo","sheet","sheetsById","e","console","error","getResponses","sheetLink","slice","lastIndexOf","length","rows","getRows","log","map","r","_rawData","cellStats"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,oBAAlC;;AAEA,eAAeC,QAAf,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AACrC,QAAMC,GAAG,GAAG,IAAIJ,iBAAJ,CAAsBE,OAAtB,EAA+BC,MAA/B,CAAZ;AACA,QAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAEA,MAAI;AACA,UAAMN,GAAG,CAACO,SAAJ,CAAcL,OAAO,CAACC,GAAR,CAAYK,wBAA1B,CAAN;AACA,UAAMR,GAAG,CAACS,QAAJ,EAAN;AACA,UAAMC,KAAK,GAAGV,GAAG,CAACW,UAAJ,CAAeZ,MAAf,CAAd;AACA,WAAOW,KAAP;AACH,GALD,CAKE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACH;AACJ,C,CAED;;;AACA,OAAO,eAAeG,YAAf,CAA4BC,SAA5B,EAAuC;AAC1C,QAAMlB,OAAO,GAAGkB,SAAS,CAACC,KAAV,CAAgBD,SAAS,CAACE,WAAV,CAAsB,KAAtB,IAA+B,CAA/C,EAAkDF,SAAS,CAACE,WAAV,CAAsB,QAAtB,CAAlD,CAAhB;AACA,QAAMnB,MAAM,GAAGiB,SAAS,CAACC,KAAV,CAAgBD,SAAS,CAACE,WAAV,CAAsB,MAAtB,IAAgC,CAAhD,EAAmDF,SAAS,CAACG,MAA7D,CAAf;AAEA,QAAMnB,GAAG,GAAG,IAAIJ,iBAAJ,CAAsBE,OAAtB,EAA+BC,MAA/B,CAAZ;AACA,QAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAEA,MAAI;AACA,UAAMN,GAAG,CAACO,SAAJ,CAAcL,OAAO,CAACC,GAAR,CAAYK,wBAA1B,CAAN;AACA,UAAMR,GAAG,CAACS,QAAJ,EAAN;AACA,UAAMC,KAAK,GAAGV,GAAG,CAACW,UAAJ,CAAeZ,MAAf,CAAd;AACA,UAAMqB,IAAI,GAAG,MAAMV,KAAK,CAACW,OAAN,EAAnB;AACAR,IAAAA,OAAO,CAACS,GAAR,CAAYF,IAAI,CAACD,MAAjB;AACAC,IAAAA,IAAI,CAACG,GAAL,CAAUC,CAAD,IAAO;AACZX,MAAAA,OAAO,CAACS,GAAR,CAAYE,CAAC,CAACC,QAAd;AACH,KAFD;AAIAZ,IAAAA,OAAO,CAACS,GAAR,CAAYZ,KAAK,CAACgB,SAAlB;AACA,WAAOhB,KAAP;AACH,GAZD,CAYE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACH;AACF","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nasync function getSheet(sheetID, pageID) {\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n    const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n    const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        const sheet = doc.sheetsById[pageID];\n        return sheet;\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n}\n\n// Fetch a Google Sheet\nexport async function getResponses(sheetLink) {\n    const sheetID = sheetLink.slice(sheetLink.lastIndexOf(\"/d/\") + 3, sheetLink.lastIndexOf('/edit#'));\n    const pageID = sheetLink.slice(sheetLink.lastIndexOf(\"gid=\") + 4, sheetLink.length);\n\n    const doc = new GoogleSpreadsheet(sheetID, pageID);\n    const client_email = process.env.REACT_APP_SHEETS_CLIENT_EMAIL;\n    const private_key = process.env.REACT_APP_SHEETS_PRIVATE_KEY;\n\n    try {\n        await doc.useApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n        await doc.loadInfo();\n        const sheet = doc.sheetsById[pageID];\n        const rows = await sheet.getRows();\n        console.log(rows.length);\n        rows.map((r) => {\n            console.log(r._rawData);\n        });\n\n        console.log(sheet.cellStats);\n        return sheet;\n    } catch (e) {\n        console.error('Error: ', e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}